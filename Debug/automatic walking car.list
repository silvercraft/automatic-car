
automatic walking car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000242c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080025c0  080025c0  000125c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080025fc  080025fc  000125fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002600  08002600  00012600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          00000130  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000013c  2000013c  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001352d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000240b  00000000  00000000  00033569  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009573  00000000  00000000  00035974  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008e8  00000000  00000000  0003eee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000fd8  00000000  00000000  0003f7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005d33  00000000  00000000  000407a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003cbe  00000000  00000000  000464db  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004a199  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001cd4  00000000  00000000  0004a218  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080025a8 	.word	0x080025a8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080025a8 	.word	0x080025a8

080001d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001d4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d6:	4a0e      	ldr	r2, [pc, #56]	; (8000210 <HAL_InitTick+0x3c>)
 80001d8:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <HAL_InitTick+0x40>)
 80001da:	7812      	ldrb	r2, [r2, #0]
 80001dc:	681b      	ldr	r3, [r3, #0]
{
 80001de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001e4:	fbb0 f0f2 	udiv	r0, r0, r2
 80001e8:	fbb3 f0f0 	udiv	r0, r3, r0
 80001ec:	f000 f8a0 	bl	8000330 <HAL_SYSTICK_Config>
 80001f0:	b908      	cbnz	r0, 80001f6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001f2:	2d0f      	cmp	r5, #15
 80001f4:	d901      	bls.n	80001fa <HAL_InitTick+0x26>
    return HAL_ERROR;
 80001f6:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80001f8:	bd38      	pop	{r3, r4, r5, pc}
 80001fa:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001fc:	4602      	mov	r2, r0
 80001fe:	4629      	mov	r1, r5
 8000200:	f04f 30ff 	mov.w	r0, #4294967295
 8000204:	f000 f852 	bl	80002ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000208:	4b03      	ldr	r3, [pc, #12]	; (8000218 <HAL_InitTick+0x44>)
 800020a:	4620      	mov	r0, r4
 800020c:	601d      	str	r5, [r3, #0]
 800020e:	bd38      	pop	{r3, r4, r5, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	20000008 	.word	0x20000008
 8000218:	20000004 	.word	0x20000004

0800021c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800021c:	4a07      	ldr	r2, [pc, #28]	; (800023c <HAL_Init+0x20>)
{
 800021e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000220:	6813      	ldr	r3, [r2, #0]
 8000222:	f043 0310 	orr.w	r3, r3, #16
 8000226:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000228:	2003      	movs	r0, #3
 800022a:	f000 f82d 	bl	8000288 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800022e:	2000      	movs	r0, #0
 8000230:	f7ff ffd0 	bl	80001d4 <HAL_InitTick>
  HAL_MspInit();
 8000234:	f002 f852 	bl	80022dc <HAL_MspInit>
}
 8000238:	2000      	movs	r0, #0
 800023a:	bd08      	pop	{r3, pc}
 800023c:	40022000 	.word	0x40022000

08000240 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000240:	4a03      	ldr	r2, [pc, #12]	; (8000250 <HAL_IncTick+0x10>)
 8000242:	4b04      	ldr	r3, [pc, #16]	; (8000254 <HAL_IncTick+0x14>)
 8000244:	6811      	ldr	r1, [r2, #0]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	440b      	add	r3, r1
 800024a:	6013      	str	r3, [r2, #0]
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	20000048 	.word	0x20000048
 8000254:	20000000 	.word	0x20000000

08000258 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000258:	4b01      	ldr	r3, [pc, #4]	; (8000260 <HAL_GetTick+0x8>)
 800025a:	6818      	ldr	r0, [r3, #0]
}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	20000048 	.word	0x20000048

08000264 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000264:	b538      	push	{r3, r4, r5, lr}
 8000266:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000268:	f7ff fff6 	bl	8000258 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800026c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800026e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000270:	d002      	beq.n	8000278 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000272:	4b04      	ldr	r3, [pc, #16]	; (8000284 <HAL_Delay+0x20>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000278:	f7ff ffee 	bl	8000258 <HAL_GetTick>
 800027c:	1b40      	subs	r0, r0, r5
 800027e:	4284      	cmp	r4, r0
 8000280:	d8fa      	bhi.n	8000278 <HAL_Delay+0x14>
  {
  }
}
 8000282:	bd38      	pop	{r3, r4, r5, pc}
 8000284:	20000000 	.word	0x20000000

08000288 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000288:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800028a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800028c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000290:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000292:	0200      	lsls	r0, r0, #8
 8000294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000298:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800029c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80002a0:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80002a2:	60d3      	str	r3, [r2, #12]
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002ac:	4b18      	ldr	r3, [pc, #96]	; (8000310 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002ae:	b470      	push	{r4, r5, r6}
 80002b0:	68dc      	ldr	r4, [r3, #12]
 80002b2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002b6:	f1c4 0607 	rsb	r6, r4, #7
 80002ba:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002bc:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002c0:	bf28      	it	cs
 80002c2:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c4:	2b06      	cmp	r3, #6
 80002c6:	d917      	bls.n	80002f8 <HAL_NVIC_SetPriority+0x4c>
 80002c8:	3c03      	subs	r4, #3
 80002ca:	2501      	movs	r5, #1
 80002cc:	40a5      	lsls	r5, r4
 80002ce:	3d01      	subs	r5, #1
 80002d0:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002d2:	2301      	movs	r3, #1
 80002d4:	40b3      	lsls	r3, r6
 80002d6:	3b01      	subs	r3, #1
 80002d8:	4019      	ands	r1, r3
 80002da:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 80002dc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002de:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 80002e2:	db0c      	blt.n	80002fe <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80002e8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80002ec:	0109      	lsls	r1, r1, #4
 80002ee:	b2c9      	uxtb	r1, r1
 80002f0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80002f4:	bc70      	pop	{r4, r5, r6}
 80002f6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002f8:	2200      	movs	r2, #0
 80002fa:	4614      	mov	r4, r2
 80002fc:	e7e9      	b.n	80002d2 <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fe:	4b05      	ldr	r3, [pc, #20]	; (8000314 <HAL_NVIC_SetPriority+0x68>)
 8000300:	f000 000f 	and.w	r0, r0, #15
 8000304:	0109      	lsls	r1, r1, #4
 8000306:	4403      	add	r3, r0
 8000308:	b2c9      	uxtb	r1, r1
 800030a:	7619      	strb	r1, [r3, #24]
 800030c:	bc70      	pop	{r4, r5, r6}
 800030e:	4770      	bx	lr
 8000310:	e000ed00 	.word	0xe000ed00
 8000314:	e000ecfc 	.word	0xe000ecfc

08000318 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000318:	f000 011f 	and.w	r1, r0, #31
 800031c:	2301      	movs	r3, #1
 800031e:	0940      	lsrs	r0, r0, #5
 8000320:	4a02      	ldr	r2, [pc, #8]	; (800032c <HAL_NVIC_EnableIRQ+0x14>)
 8000322:	408b      	lsls	r3, r1
 8000324:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	e000e100 	.word	0xe000e100

08000330 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000330:	3801      	subs	r0, #1
 8000332:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000336:	d20e      	bcs.n	8000356 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000338:	4b08      	ldr	r3, [pc, #32]	; (800035c <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800033a:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033c:	4c08      	ldr	r4, [pc, #32]	; (8000360 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800033e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000340:	20f0      	movs	r0, #240	; 0xf0
 8000342:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000346:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000348:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800034a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800034c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800034e:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000350:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000354:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000356:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	e000e010 	.word	0xe000e010
 8000360:	e000ed00 	.word	0xe000ed00

08000364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000364:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000366:	6809      	ldr	r1, [r1, #0]
 8000368:	2900      	cmp	r1, #0
 800036a:	f000 80f2 	beq.w	8000552 <HAL_GPIO_Init+0x1ee>
{
 800036e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000372:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8000570 <HAL_GPIO_Init+0x20c>
{
 8000376:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000378:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800037a:	f04f 0801 	mov.w	r8, #1
 800037e:	e083      	b.n	8000488 <HAL_GPIO_Init+0x124>
 8000380:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000384:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8000386:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800038a:	fa03 f309 	lsl.w	r3, r3, r9
 800038e:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000390:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000394:	ea0b 0b03 	and.w	fp, fp, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000398:	fa06 f609 	lsl.w	r6, r6, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800039c:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003a0:	ea46 060b 	orr.w	r6, r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003a4:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 80003a8:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003aa:	f240 80a2 	bls.w	80004f2 <HAL_GPIO_Init+0x18e>
      temp = GPIOx->PUPDR;
 80003ae:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003b0:	f8dc 2008 	ldr.w	r2, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003b4:	4033      	ands	r3, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003b6:	fa02 f209 	lsl.w	r2, r2, r9
 80003ba:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003bc:	00e3      	lsls	r3, r4, #3
      GPIOx->PUPDR = temp;
 80003be:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003c0:	d55e      	bpl.n	8000480 <HAL_GPIO_Init+0x11c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003c2:	4b64      	ldr	r3, [pc, #400]	; (8000554 <HAL_GPIO_Init+0x1f0>)
 80003c4:	4a63      	ldr	r2, [pc, #396]	; (8000554 <HAL_GPIO_Init+0x1f0>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6193      	str	r3, [r2, #24]
 80003ce:	6993      	ldr	r3, [r2, #24]
 80003d0:	f025 0603 	bic.w	r6, r5, #3
 80003d4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80003d8:	f003 0301 	and.w	r3, r3, #1
 80003dc:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80003e0:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80003e2:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003e6:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80003e8:	f8d6 9008 	ldr.w	r9, [r6, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	220f      	movs	r2, #15
 80003f0:	409a      	lsls	r2, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80003f2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80003f6:	ea29 0a02 	bic.w	sl, r9, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80003fa:	f000 8091 	beq.w	8000520 <HAL_GPIO_Init+0x1bc>
 80003fe:	4a56      	ldr	r2, [pc, #344]	; (8000558 <HAL_GPIO_Init+0x1f4>)
 8000400:	4290      	cmp	r0, r2
 8000402:	f000 808f 	beq.w	8000524 <HAL_GPIO_Init+0x1c0>
 8000406:	4a55      	ldr	r2, [pc, #340]	; (800055c <HAL_GPIO_Init+0x1f8>)
 8000408:	4290      	cmp	r0, r2
 800040a:	f000 808e 	beq.w	800052a <HAL_GPIO_Init+0x1c6>
 800040e:	4a54      	ldr	r2, [pc, #336]	; (8000560 <HAL_GPIO_Init+0x1fc>)
 8000410:	4290      	cmp	r0, r2
 8000412:	f000 808f 	beq.w	8000534 <HAL_GPIO_Init+0x1d0>
 8000416:	4a53      	ldr	r2, [pc, #332]	; (8000564 <HAL_GPIO_Init+0x200>)
 8000418:	4290      	cmp	r0, r2
 800041a:	f000 8090 	beq.w	800053e <HAL_GPIO_Init+0x1da>
 800041e:	4a52      	ldr	r2, [pc, #328]	; (8000568 <HAL_GPIO_Init+0x204>)
 8000420:	4290      	cmp	r0, r2
 8000422:	f000 8091 	beq.w	8000548 <HAL_GPIO_Init+0x1e4>
 8000426:	4a51      	ldr	r2, [pc, #324]	; (800056c <HAL_GPIO_Init+0x208>)
 8000428:	4290      	cmp	r0, r2
 800042a:	bf0c      	ite	eq
 800042c:	f04f 0906 	moveq.w	r9, #6
 8000430:	f04f 0907 	movne.w	r9, #7
 8000434:	fa09 f303 	lsl.w	r3, r9, r3
 8000438:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 800043c:	60b3      	str	r3, [r6, #8]
        temp = EXTI->IMR;
 800043e:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8000442:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000444:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 8000446:	bf54      	ite	pl
 8000448:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800044a:	433b      	orrmi	r3, r7
        }
        EXTI->IMR = temp;
 800044c:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8000450:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000454:	03a6      	lsls	r6, r4, #14
        temp &= ~((uint32_t)iocurrent);
 8000456:	bf54      	ite	pl
 8000458:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800045a:	433b      	orrmi	r3, r7
        }
        EXTI->EMR = temp;
 800045c:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000460:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000464:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8000466:	bf54      	ite	pl
 8000468:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800046a:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR = temp;
 800046c:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8000470:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000474:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000476:	bf54      	ite	pl
 8000478:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800047a:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR = temp;
 800047c:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }
    
    position++;
 8000480:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000482:	fa31 f305 	lsrs.w	r3, r1, r5
 8000486:	d048      	beq.n	800051a <HAL_GPIO_Init+0x1b6>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000488:	fa08 f205 	lsl.w	r2, r8, r5
    if(iocurrent)
 800048c:	ea12 0701 	ands.w	r7, r2, r1
 8000490:	d0f6      	beq.n	8000480 <HAL_GPIO_Init+0x11c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000492:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000496:	f024 0a10 	bic.w	sl, r4, #16
 800049a:	f1ba 0f02 	cmp.w	sl, #2
 800049e:	f47f af6f 	bne.w	8000380 <HAL_GPIO_Init+0x1c>
        temp = GPIOx->AFR[position >> 3];
 80004a2:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 80004a6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80004aa:	f005 0307 	and.w	r3, r5, #7
        temp = GPIOx->AFR[position >> 3];
 80004ae:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	f04f 0b0f 	mov.w	fp, #15
 80004b8:	fa0b fb03 	lsl.w	fp, fp, r3
 80004bc:	ea26 0a0b 	bic.w	sl, r6, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80004c0:	f8dc 6010 	ldr.w	r6, [ip, #16]
 80004c4:	fa06 f303 	lsl.w	r3, r6, r3
 80004c8:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3] = temp;
 80004cc:	f8c9 3020 	str.w	r3, [r9, #32]
 80004d0:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004d4:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 80004d6:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004da:	fa03 f309 	lsl.w	r3, r3, r9
 80004de:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004e0:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004e4:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004e8:	fa06 f609 	lsl.w	r6, r6, r9
 80004ec:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 80004f0:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR;
 80004f2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80004f4:	ea06 0a03 	and.w	sl, r6, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 80004f8:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80004fc:	fa06 f609 	lsl.w	r6, r6, r9
 8000500:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8000504:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000506:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800050a:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800050e:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000512:	40ae      	lsls	r6, r5
 8000514:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8000516:	6046      	str	r6, [r0, #4]
 8000518:	e749      	b.n	80003ae <HAL_GPIO_Init+0x4a>
  }
}
 800051a:	b003      	add	sp, #12
 800051c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000520:	2300      	movs	r3, #0
 8000522:	e789      	b.n	8000438 <HAL_GPIO_Init+0xd4>
 8000524:	fa08 f303 	lsl.w	r3, r8, r3
 8000528:	e786      	b.n	8000438 <HAL_GPIO_Init+0xd4>
 800052a:	f04f 0902 	mov.w	r9, #2
 800052e:	fa09 f303 	lsl.w	r3, r9, r3
 8000532:	e781      	b.n	8000438 <HAL_GPIO_Init+0xd4>
 8000534:	f04f 0903 	mov.w	r9, #3
 8000538:	fa09 f303 	lsl.w	r3, r9, r3
 800053c:	e77c      	b.n	8000438 <HAL_GPIO_Init+0xd4>
 800053e:	f04f 0904 	mov.w	r9, #4
 8000542:	fa09 f303 	lsl.w	r3, r9, r3
 8000546:	e777      	b.n	8000438 <HAL_GPIO_Init+0xd4>
 8000548:	f04f 0905 	mov.w	r9, #5
 800054c:	fa09 f303 	lsl.w	r3, r9, r3
 8000550:	e772      	b.n	8000438 <HAL_GPIO_Init+0xd4>
 8000552:	4770      	bx	lr
 8000554:	40021000 	.word	0x40021000
 8000558:	48000400 	.word	0x48000400
 800055c:	48000800 	.word	0x48000800
 8000560:	48000c00 	.word	0x48000c00
 8000564:	48001000 	.word	0x48001000
 8000568:	48001400 	.word	0x48001400
 800056c:	48001800 	.word	0x48001800
 8000570:	40010400 	.word	0x40010400

08000574 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000574:	6903      	ldr	r3, [r0, #16]
 8000576:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000578:	bf14      	ite	ne
 800057a:	2001      	movne	r0, #1
 800057c:	2000      	moveq	r0, #0
 800057e:	4770      	bx	lr

08000580 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000580:	b90a      	cbnz	r2, 8000586 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000582:	6281      	str	r1, [r0, #40]	; 0x28
 8000584:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000586:	6181      	str	r1, [r0, #24]
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800058c:	6943      	ldr	r3, [r0, #20]
 800058e:	4059      	eors	r1, r3
 8000590:	6141      	str	r1, [r0, #20]
 8000592:	4770      	bx	lr

08000594 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000596:	6951      	ldr	r1, [r2, #20]
 8000598:	4201      	tst	r1, r0
 800059a:	d100      	bne.n	800059e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800059c:	4770      	bx	lr
{
 800059e:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80005a0:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80005a2:	f001 fe89 	bl	80022b8 <HAL_GPIO_EXTI_Callback>
 80005a6:	bd08      	pop	{r3, pc}
 80005a8:	40010400 	.word	0x40010400

080005ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80005ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005b0:	6803      	ldr	r3, [r0, #0]
 80005b2:	07df      	lsls	r7, r3, #31
{
 80005b4:	b083      	sub	sp, #12
 80005b6:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005b8:	d53d      	bpl.n	8000636 <HAL_RCC_OscConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005ba:	49bb      	ldr	r1, [pc, #748]	; (80008a8 <HAL_RCC_OscConfig+0x2fc>)
 80005bc:	684a      	ldr	r2, [r1, #4]
 80005be:	f002 020c 	and.w	r2, r2, #12
 80005c2:	2a04      	cmp	r2, #4
 80005c4:	f000 817d 	beq.w	80008c2 <HAL_RCC_OscConfig+0x316>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005c8:	684a      	ldr	r2, [r1, #4]
 80005ca:	f002 020c 	and.w	r2, r2, #12
 80005ce:	2a08      	cmp	r2, #8
 80005d0:	f000 8170 	beq.w	80008b4 <HAL_RCC_OscConfig+0x308>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005d4:	6863      	ldr	r3, [r4, #4]
 80005d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005da:	f000 8213 	beq.w	8000a04 <HAL_RCC_OscConfig+0x458>
 80005de:	2b00      	cmp	r3, #0
 80005e0:	f000 8192 	beq.w	8000908 <HAL_RCC_OscConfig+0x35c>
 80005e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005e8:	f000 8299 	beq.w	8000b1e <HAL_RCC_OscConfig+0x572>
 80005ec:	4bae      	ldr	r3, [pc, #696]	; (80008a8 <HAL_RCC_OscConfig+0x2fc>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005fc:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80005fe:	f7ff fe2b 	bl	8000258 <HAL_GetTick>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000602:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8000606:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000608:	4ea7      	ldr	r6, [pc, #668]	; (80008a8 <HAL_RCC_OscConfig+0x2fc>)
 800060a:	2501      	movs	r5, #1
 800060c:	e005      	b.n	800061a <HAL_RCC_OscConfig+0x6e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800060e:	f7ff fe23 	bl	8000258 <HAL_GetTick>
 8000612:	1bc0      	subs	r0, r0, r7
 8000614:	2864      	cmp	r0, #100	; 0x64
 8000616:	f200 81bb 	bhi.w	8000990 <HAL_RCC_OscConfig+0x3e4>
 800061a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800061e:	6832      	ldr	r2, [r6, #0]
 8000620:	fa98 f3a8 	rbit	r3, r8
 8000624:	fab3 f383 	clz	r3, r3
 8000628:	f003 031f 	and.w	r3, r3, #31
 800062c:	fa05 f303 	lsl.w	r3, r5, r3
 8000630:	4213      	tst	r3, r2
 8000632:	d0ec      	beq.n	800060e <HAL_RCC_OscConfig+0x62>
 8000634:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000636:	079e      	lsls	r6, r3, #30
 8000638:	d542      	bpl.n	80006c0 <HAL_RCC_OscConfig+0x114>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800063a:	4a9b      	ldr	r2, [pc, #620]	; (80008a8 <HAL_RCC_OscConfig+0x2fc>)
 800063c:	6851      	ldr	r1, [r2, #4]
 800063e:	f011 0f0c 	tst.w	r1, #12
 8000642:	f000 80f1 	beq.w	8000828 <HAL_RCC_OscConfig+0x27c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000646:	6851      	ldr	r1, [r2, #4]
 8000648:	f001 010c 	and.w	r1, r1, #12
 800064c:	2908      	cmp	r1, #8
 800064e:	f000 80e4 	beq.w	800081a <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000652:	68e2      	ldr	r2, [r4, #12]
 8000654:	2a00      	cmp	r2, #0
 8000656:	f000 81db 	beq.w	8000a10 <HAL_RCC_OscConfig+0x464>
 800065a:	2201      	movs	r2, #1
 800065c:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000660:	fab3 f383 	clz	r3, r3
 8000664:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000668:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800066c:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800066e:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 8000670:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000672:	f7ff fdf1 	bl	8000258 <HAL_GetTick>
 8000676:	f04f 0802 	mov.w	r8, #2
 800067a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800067c:	4d8a      	ldr	r5, [pc, #552]	; (80008a8 <HAL_RCC_OscConfig+0x2fc>)
 800067e:	e005      	b.n	800068c <HAL_RCC_OscConfig+0xe0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000680:	f7ff fdea 	bl	8000258 <HAL_GetTick>
 8000684:	1bc0      	subs	r0, r0, r7
 8000686:	2802      	cmp	r0, #2
 8000688:	f200 8182 	bhi.w	8000990 <HAL_RCC_OscConfig+0x3e4>
 800068c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000690:	682a      	ldr	r2, [r5, #0]
 8000692:	fa98 f3a8 	rbit	r3, r8
 8000696:	fab3 f383 	clz	r3, r3
 800069a:	f003 031f 	and.w	r3, r3, #31
 800069e:	fa06 f303 	lsl.w	r3, r6, r3
 80006a2:	4213      	tst	r3, r2
 80006a4:	d0ec      	beq.n	8000680 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006a6:	6829      	ldr	r1, [r5, #0]
 80006a8:	22f8      	movs	r2, #248	; 0xf8
 80006aa:	fa92 f2a2 	rbit	r2, r2
 80006ae:	6923      	ldr	r3, [r4, #16]
 80006b0:	fab2 f282 	clz	r2, r2
 80006b4:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 80006b8:	4093      	lsls	r3, r2
 80006ba:	430b      	orrs	r3, r1
 80006bc:	602b      	str	r3, [r5, #0]
 80006be:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006c0:	071d      	lsls	r5, r3, #28
 80006c2:	d446      	bmi.n	8000752 <HAL_RCC_OscConfig+0x1a6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80006c4:	0758      	lsls	r0, r3, #29
 80006c6:	d572      	bpl.n	80007ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006c8:	4b77      	ldr	r3, [pc, #476]	; (80008a8 <HAL_RCC_OscConfig+0x2fc>)
 80006ca:	69da      	ldr	r2, [r3, #28]
 80006cc:	00d1      	lsls	r1, r2, #3
 80006ce:	f140 810f 	bpl.w	80008f0 <HAL_RCC_OscConfig+0x344>
    FlagStatus       pwrclkchanged = RESET;
 80006d2:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006d6:	4d75      	ldr	r5, [pc, #468]	; (80008ac <HAL_RCC_OscConfig+0x300>)
 80006d8:	682b      	ldr	r3, [r5, #0]
 80006da:	05da      	lsls	r2, r3, #23
 80006dc:	f140 8148 	bpl.w	8000970 <HAL_RCC_OscConfig+0x3c4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006e0:	68a3      	ldr	r3, [r4, #8]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	f000 81ba 	beq.w	8000a5c <HAL_RCC_OscConfig+0x4b0>
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	f000 815f 	beq.w	80009ac <HAL_RCC_OscConfig+0x400>
 80006ee:	2b05      	cmp	r3, #5
 80006f0:	4b6d      	ldr	r3, [pc, #436]	; (80008a8 <HAL_RCC_OscConfig+0x2fc>)
 80006f2:	6a1a      	ldr	r2, [r3, #32]
 80006f4:	f000 8220 	beq.w	8000b38 <HAL_RCC_OscConfig+0x58c>
 80006f8:	f022 0201 	bic.w	r2, r2, #1
 80006fc:	621a      	str	r2, [r3, #32]
 80006fe:	6a1a      	ldr	r2, [r3, #32]
 8000700:	f022 0204 	bic.w	r2, r2, #4
 8000704:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000706:	f7ff fda7 	bl	8000258 <HAL_GetTick>
 800070a:	f04f 0902 	mov.w	r9, #2
 800070e:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000710:	4e65      	ldr	r6, [pc, #404]	; (80008a8 <HAL_RCC_OscConfig+0x2fc>)
 8000712:	2501      	movs	r5, #1
 8000714:	e015      	b.n	8000742 <HAL_RCC_OscConfig+0x196>
 8000716:	fa99 f3a9 	rbit	r3, r9
 800071a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800071c:	fa99 f3a9 	rbit	r3, r9
 8000720:	fab3 f383 	clz	r3, r3
 8000724:	f003 031f 	and.w	r3, r3, #31
 8000728:	fa05 f303 	lsl.w	r3, r5, r3
 800072c:	4213      	tst	r3, r2
 800072e:	f040 8133 	bne.w	8000998 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000732:	f7ff fd91 	bl	8000258 <HAL_GetTick>
 8000736:	f241 3388 	movw	r3, #5000	; 0x1388
 800073a:	1bc0      	subs	r0, r0, r7
 800073c:	4298      	cmp	r0, r3
 800073e:	f200 8127 	bhi.w	8000990 <HAL_RCC_OscConfig+0x3e4>
 8000742:	fa99 f3a9 	rbit	r3, r9
 8000746:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800074a:	2b00      	cmp	r3, #0
 800074c:	d0e3      	beq.n	8000716 <HAL_RCC_OscConfig+0x16a>
 800074e:	6a32      	ldr	r2, [r6, #32]
 8000750:	e7e4      	b.n	800071c <HAL_RCC_OscConfig+0x170>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000752:	6962      	ldr	r2, [r4, #20]
 8000754:	2a00      	cmp	r2, #0
 8000756:	d07f      	beq.n	8000858 <HAL_RCC_OscConfig+0x2ac>
 8000758:	2201      	movs	r2, #1
 800075a:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 800075e:	4b54      	ldr	r3, [pc, #336]	; (80008b0 <HAL_RCC_OscConfig+0x304>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000760:	4e51      	ldr	r6, [pc, #324]	; (80008a8 <HAL_RCC_OscConfig+0x2fc>)
      __HAL_RCC_LSI_ENABLE();
 8000762:	fab1 f181 	clz	r1, r1
 8000766:	440b      	add	r3, r1
 8000768:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800076a:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 800076c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800076e:	f7ff fd73 	bl	8000258 <HAL_GetTick>
 8000772:	f04f 0802 	mov.w	r8, #2
 8000776:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000778:	e005      	b.n	8000786 <HAL_RCC_OscConfig+0x1da>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800077a:	f7ff fd6d 	bl	8000258 <HAL_GetTick>
 800077e:	1bc0      	subs	r0, r0, r7
 8000780:	2802      	cmp	r0, #2
 8000782:	f200 8105 	bhi.w	8000990 <HAL_RCC_OscConfig+0x3e4>
 8000786:	fa98 f3a8 	rbit	r3, r8
 800078a:	fa98 f3a8 	rbit	r3, r8
 800078e:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000792:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000794:	fa98 f3a8 	rbit	r3, r8
 8000798:	fab3 f383 	clz	r3, r3
 800079c:	f003 031f 	and.w	r3, r3, #31
 80007a0:	fa05 f303 	lsl.w	r3, r5, r3
 80007a4:	4213      	tst	r3, r2
 80007a6:	d0e8      	beq.n	800077a <HAL_RCC_OscConfig+0x1ce>
 80007a8:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007aa:	0758      	lsls	r0, r3, #29
 80007ac:	d48c      	bmi.n	80006c8 <HAL_RCC_OscConfig+0x11c>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007ae:	69a3      	ldr	r3, [r4, #24]
 80007b0:	b37b      	cbz	r3, 8000812 <HAL_RCC_OscConfig+0x266>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007b2:	4d3d      	ldr	r5, [pc, #244]	; (80008a8 <HAL_RCC_OscConfig+0x2fc>)
 80007b4:	686a      	ldr	r2, [r5, #4]
 80007b6:	f002 020c 	and.w	r2, r2, #12
 80007ba:	2a08      	cmp	r2, #8
 80007bc:	d048      	beq.n	8000850 <HAL_RCC_OscConfig+0x2a4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007be:	2b02      	cmp	r3, #2
 80007c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007c4:	f000 8150 	beq.w	8000a68 <HAL_RCC_OscConfig+0x4bc>
 80007c8:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80007cc:	fab3 f383 	clz	r3, r3
 80007d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80007d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007de:	f7ff fd3b 	bl	8000258 <HAL_GetTick>
 80007e2:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80007e6:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007e8:	2601      	movs	r6, #1
 80007ea:	e005      	b.n	80007f8 <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007ec:	f7ff fd34 	bl	8000258 <HAL_GetTick>
 80007f0:	1bc0      	subs	r0, r0, r7
 80007f2:	2802      	cmp	r0, #2
 80007f4:	f200 80cc 	bhi.w	8000990 <HAL_RCC_OscConfig+0x3e4>
 80007f8:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007fc:	682a      	ldr	r2, [r5, #0]
 80007fe:	fa94 f3a4 	rbit	r3, r4
 8000802:	fab3 f383 	clz	r3, r3
 8000806:	f003 031f 	and.w	r3, r3, #31
 800080a:	fa06 f303 	lsl.w	r3, r6, r3
 800080e:	4213      	tst	r3, r2
 8000810:	d1ec      	bne.n	80007ec <HAL_RCC_OscConfig+0x240>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000812:	2000      	movs	r0, #0
}
 8000814:	b003      	add	sp, #12
 8000816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800081a:	6852      	ldr	r2, [r2, #4]
 800081c:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8000820:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000824:	f47f af15 	bne.w	8000652 <HAL_RCC_OscConfig+0xa6>
 8000828:	2202      	movs	r2, #2
 800082a:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800082e:	491e      	ldr	r1, [pc, #120]	; (80008a8 <HAL_RCC_OscConfig+0x2fc>)
 8000830:	6808      	ldr	r0, [r1, #0]
 8000832:	fa92 f2a2 	rbit	r2, r2
 8000836:	fab2 f282 	clz	r2, r2
 800083a:	f002 021f 	and.w	r2, r2, #31
 800083e:	2101      	movs	r1, #1
 8000840:	fa01 f202 	lsl.w	r2, r1, r2
 8000844:	4202      	tst	r2, r0
 8000846:	f000 8082 	beq.w	800094e <HAL_RCC_OscConfig+0x3a2>
 800084a:	68e2      	ldr	r2, [r4, #12]
 800084c:	428a      	cmp	r2, r1
 800084e:	d07e      	beq.n	800094e <HAL_RCC_OscConfig+0x3a2>
        return HAL_ERROR;
 8000850:	2001      	movs	r0, #1
}
 8000852:	b003      	add	sp, #12
 8000854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000858:	2501      	movs	r5, #1
 800085a:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <HAL_RCC_OscConfig+0x304>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000860:	4e11      	ldr	r6, [pc, #68]	; (80008a8 <HAL_RCC_OscConfig+0x2fc>)
      __HAL_RCC_LSI_DISABLE();
 8000862:	fab1 f181 	clz	r1, r1
 8000866:	440b      	add	r3, r1
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	f04f 0802 	mov.w	r8, #2
 800086e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000870:	f7ff fcf2 	bl	8000258 <HAL_GetTick>
 8000874:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000876:	e005      	b.n	8000884 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000878:	f7ff fcee 	bl	8000258 <HAL_GetTick>
 800087c:	1bc0      	subs	r0, r0, r7
 800087e:	2802      	cmp	r0, #2
 8000880:	f200 8086 	bhi.w	8000990 <HAL_RCC_OscConfig+0x3e4>
 8000884:	fa98 f3a8 	rbit	r3, r8
 8000888:	fa98 f3a8 	rbit	r3, r8
 800088c:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000890:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000892:	fa98 f3a8 	rbit	r3, r8
 8000896:	fab3 f383 	clz	r3, r3
 800089a:	f003 031f 	and.w	r3, r3, #31
 800089e:	fa05 f303 	lsl.w	r3, r5, r3
 80008a2:	4213      	tst	r3, r2
 80008a4:	d1e8      	bne.n	8000878 <HAL_RCC_OscConfig+0x2cc>
 80008a6:	e77f      	b.n	80007a8 <HAL_RCC_OscConfig+0x1fc>
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40007000 	.word	0x40007000
 80008b0:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008b4:	684a      	ldr	r2, [r1, #4]
 80008b6:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 80008ba:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80008be:	f47f ae89 	bne.w	80005d4 <HAL_RCC_OscConfig+0x28>
 80008c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008c6:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008ca:	499f      	ldr	r1, [pc, #636]	; (8000b48 <HAL_RCC_OscConfig+0x59c>)
 80008cc:	6808      	ldr	r0, [r1, #0]
 80008ce:	fa92 f2a2 	rbit	r2, r2
 80008d2:	fab2 f282 	clz	r2, r2
 80008d6:	f002 021f 	and.w	r2, r2, #31
 80008da:	2101      	movs	r1, #1
 80008dc:	fa01 f202 	lsl.w	r2, r1, r2
 80008e0:	4202      	tst	r2, r0
 80008e2:	f43f aea8 	beq.w	8000636 <HAL_RCC_OscConfig+0x8a>
 80008e6:	6862      	ldr	r2, [r4, #4]
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	f47f aea4 	bne.w	8000636 <HAL_RCC_OscConfig+0x8a>
 80008ee:	e7af      	b.n	8000850 <HAL_RCC_OscConfig+0x2a4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80008f0:	69da      	ldr	r2, [r3, #28]
 80008f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008f6:	61da      	str	r2, [r3, #28]
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000902:	f04f 0801 	mov.w	r8, #1
 8000906:	e6e6      	b.n	80006d6 <HAL_RCC_OscConfig+0x12a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000908:	4d8f      	ldr	r5, [pc, #572]	; (8000b48 <HAL_RCC_OscConfig+0x59c>)
 800090a:	682b      	ldr	r3, [r5, #0]
 800090c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000910:	602b      	str	r3, [r5, #0]
 8000912:	682b      	ldr	r3, [r5, #0]
 8000914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000918:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800091a:	f7ff fc9d 	bl	8000258 <HAL_GetTick>
 800091e:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8000922:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000924:	2601      	movs	r6, #1
 8000926:	e004      	b.n	8000932 <HAL_RCC_OscConfig+0x386>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000928:	f7ff fc96 	bl	8000258 <HAL_GetTick>
 800092c:	1bc0      	subs	r0, r0, r7
 800092e:	2864      	cmp	r0, #100	; 0x64
 8000930:	d82e      	bhi.n	8000990 <HAL_RCC_OscConfig+0x3e4>
 8000932:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000936:	682a      	ldr	r2, [r5, #0]
 8000938:	fa98 f3a8 	rbit	r3, r8
 800093c:	fab3 f383 	clz	r3, r3
 8000940:	f003 031f 	and.w	r3, r3, #31
 8000944:	fa06 f303 	lsl.w	r3, r6, r3
 8000948:	4213      	tst	r3, r2
 800094a:	d1ed      	bne.n	8000928 <HAL_RCC_OscConfig+0x37c>
 800094c:	e672      	b.n	8000634 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800094e:	4d7e      	ldr	r5, [pc, #504]	; (8000b48 <HAL_RCC_OscConfig+0x59c>)
 8000950:	21f8      	movs	r1, #248	; 0xf8
 8000952:	6828      	ldr	r0, [r5, #0]
 8000954:	fa91 f1a1 	rbit	r1, r1
 8000958:	6922      	ldr	r2, [r4, #16]
 800095a:	fab1 f181 	clz	r1, r1
 800095e:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8000962:	408a      	lsls	r2, r1
 8000964:	4302      	orrs	r2, r0
 8000966:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000968:	071d      	lsls	r5, r3, #28
 800096a:	f57f aeab 	bpl.w	80006c4 <HAL_RCC_OscConfig+0x118>
 800096e:	e6f0      	b.n	8000752 <HAL_RCC_OscConfig+0x1a6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000970:	682b      	ldr	r3, [r5, #0]
 8000972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000976:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000978:	f7ff fc6e 	bl	8000258 <HAL_GetTick>
 800097c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800097e:	682b      	ldr	r3, [r5, #0]
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	f53f aead 	bmi.w	80006e0 <HAL_RCC_OscConfig+0x134>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000986:	f7ff fc67 	bl	8000258 <HAL_GetTick>
 800098a:	1b80      	subs	r0, r0, r6
 800098c:	2864      	cmp	r0, #100	; 0x64
 800098e:	d9f6      	bls.n	800097e <HAL_RCC_OscConfig+0x3d2>
            return HAL_TIMEOUT;
 8000990:	2003      	movs	r0, #3
}
 8000992:	b003      	add	sp, #12
 8000994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(pwrclkchanged == SET)
 8000998:	f1b8 0f00 	cmp.w	r8, #0
 800099c:	f43f af07 	beq.w	80007ae <HAL_RCC_OscConfig+0x202>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009a0:	4a69      	ldr	r2, [pc, #420]	; (8000b48 <HAL_RCC_OscConfig+0x59c>)
 80009a2:	69d3      	ldr	r3, [r2, #28]
 80009a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009a8:	61d3      	str	r3, [r2, #28]
 80009aa:	e700      	b.n	80007ae <HAL_RCC_OscConfig+0x202>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009ac:	4d66      	ldr	r5, [pc, #408]	; (8000b48 <HAL_RCC_OscConfig+0x59c>)
 80009ae:	6a2b      	ldr	r3, [r5, #32]
 80009b0:	f023 0301 	bic.w	r3, r3, #1
 80009b4:	622b      	str	r3, [r5, #32]
 80009b6:	6a2b      	ldr	r3, [r5, #32]
 80009b8:	f023 0304 	bic.w	r3, r3, #4
 80009bc:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80009be:	f7ff fc4b 	bl	8000258 <HAL_GetTick>
 80009c2:	f04f 0902 	mov.w	r9, #2
 80009c6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009c8:	2601      	movs	r6, #1
 80009ca:	e013      	b.n	80009f4 <HAL_RCC_OscConfig+0x448>
 80009cc:	fa99 f3a9 	rbit	r3, r9
 80009d0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80009d2:	fa99 f3a9 	rbit	r3, r9
 80009d6:	fab3 f383 	clz	r3, r3
 80009da:	f003 031f 	and.w	r3, r3, #31
 80009de:	fa06 f303 	lsl.w	r3, r6, r3
 80009e2:	4213      	tst	r3, r2
 80009e4:	d0d8      	beq.n	8000998 <HAL_RCC_OscConfig+0x3ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009e6:	f7ff fc37 	bl	8000258 <HAL_GetTick>
 80009ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80009ee:	1bc0      	subs	r0, r0, r7
 80009f0:	4298      	cmp	r0, r3
 80009f2:	d8cd      	bhi.n	8000990 <HAL_RCC_OscConfig+0x3e4>
 80009f4:	fa99 f3a9 	rbit	r3, r9
 80009f8:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d0e5      	beq.n	80009cc <HAL_RCC_OscConfig+0x420>
 8000a00:	6a2a      	ldr	r2, [r5, #32]
 8000a02:	e7e6      	b.n	80009d2 <HAL_RCC_OscConfig+0x426>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a04:	4a50      	ldr	r2, [pc, #320]	; (8000b48 <HAL_RCC_OscConfig+0x59c>)
 8000a06:	6813      	ldr	r3, [r2, #0]
 8000a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a0c:	6013      	str	r3, [r2, #0]
 8000a0e:	e5f6      	b.n	80005fe <HAL_RCC_OscConfig+0x52>
 8000a10:	2501      	movs	r5, #1
 8000a12:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000a16:	fab3 f383 	clz	r3, r3
 8000a1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	f04f 0802 	mov.w	r8, #2
 8000a28:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a2a:	f7ff fc15 	bl	8000258 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a2e:	4e46      	ldr	r6, [pc, #280]	; (8000b48 <HAL_RCC_OscConfig+0x59c>)
        tickstart = HAL_GetTick();
 8000a30:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a32:	e004      	b.n	8000a3e <HAL_RCC_OscConfig+0x492>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a34:	f7ff fc10 	bl	8000258 <HAL_GetTick>
 8000a38:	1bc0      	subs	r0, r0, r7
 8000a3a:	2802      	cmp	r0, #2
 8000a3c:	d8a8      	bhi.n	8000990 <HAL_RCC_OscConfig+0x3e4>
 8000a3e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a42:	6832      	ldr	r2, [r6, #0]
 8000a44:	fa98 f3a8 	rbit	r3, r8
 8000a48:	fab3 f383 	clz	r3, r3
 8000a4c:	f003 031f 	and.w	r3, r3, #31
 8000a50:	fa05 f303 	lsl.w	r3, r5, r3
 8000a54:	4213      	tst	r3, r2
 8000a56:	d1ed      	bne.n	8000a34 <HAL_RCC_OscConfig+0x488>
 8000a58:	6823      	ldr	r3, [r4, #0]
 8000a5a:	e631      	b.n	80006c0 <HAL_RCC_OscConfig+0x114>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a5c:	4a3a      	ldr	r2, [pc, #232]	; (8000b48 <HAL_RCC_OscConfig+0x59c>)
 8000a5e:	6a13      	ldr	r3, [r2, #32]
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6213      	str	r3, [r2, #32]
 8000a66:	e64e      	b.n	8000706 <HAL_RCC_OscConfig+0x15a>
 8000a68:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000a6c:	fab3 f383 	clz	r3, r3
 8000a70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a7e:	f7ff fbeb 	bl	8000258 <HAL_GetTick>
 8000a82:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8000a86:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a88:	2601      	movs	r6, #1
 8000a8a:	e005      	b.n	8000a98 <HAL_RCC_OscConfig+0x4ec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a8c:	f7ff fbe4 	bl	8000258 <HAL_GetTick>
 8000a90:	1bc0      	subs	r0, r0, r7
 8000a92:	2802      	cmp	r0, #2
 8000a94:	f63f af7c 	bhi.w	8000990 <HAL_RCC_OscConfig+0x3e4>
 8000a98:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a9c:	682a      	ldr	r2, [r5, #0]
 8000a9e:	fa98 f3a8 	rbit	r3, r8
 8000aa2:	fab3 f383 	clz	r3, r3
 8000aa6:	f003 031f 	and.w	r3, r3, #31
 8000aaa:	fa06 f303 	lsl.w	r3, r6, r3
 8000aae:	4213      	tst	r3, r2
 8000ab0:	d1ec      	bne.n	8000a8c <HAL_RCC_OscConfig+0x4e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ab2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000ab4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ab6:	f023 030f 	bic.w	r3, r3, #15
 8000aba:	4313      	orrs	r3, r2
 8000abc:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000abe:	686a      	ldr	r2, [r5, #4]
 8000ac0:	6a23      	ldr	r3, [r4, #32]
 8000ac2:	69e1      	ldr	r1, [r4, #28]
 8000ac4:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8000ac8:	430b      	orrs	r3, r1
 8000aca:	4313      	orrs	r3, r2
 8000acc:	606b      	str	r3, [r5, #4]
 8000ace:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ad2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000ad6:	fab3 f383 	clz	r3, r3
 8000ada:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ade:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000ae8:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000aea:	f7ff fbb5 	bl	8000258 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000aee:	4e16      	ldr	r6, [pc, #88]	; (8000b48 <HAL_RCC_OscConfig+0x59c>)
        tickstart = HAL_GetTick();
 8000af0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000af2:	2501      	movs	r5, #1
 8000af4:	e005      	b.n	8000b02 <HAL_RCC_OscConfig+0x556>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000af6:	f7ff fbaf 	bl	8000258 <HAL_GetTick>
 8000afa:	1bc0      	subs	r0, r0, r7
 8000afc:	2802      	cmp	r0, #2
 8000afe:	f63f af47 	bhi.w	8000990 <HAL_RCC_OscConfig+0x3e4>
 8000b02:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b06:	6832      	ldr	r2, [r6, #0]
 8000b08:	fa94 f3a4 	rbit	r3, r4
 8000b0c:	fab3 f383 	clz	r3, r3
 8000b10:	f003 031f 	and.w	r3, r3, #31
 8000b14:	fa05 f303 	lsl.w	r3, r5, r3
 8000b18:	4213      	tst	r3, r2
 8000b1a:	d0ec      	beq.n	8000af6 <HAL_RCC_OscConfig+0x54a>
 8000b1c:	e679      	b.n	8000812 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b22:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	e562      	b.n	80005fe <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b38:	f042 0204 	orr.w	r2, r2, #4
 8000b3c:	621a      	str	r2, [r3, #32]
 8000b3e:	6a1a      	ldr	r2, [r3, #32]
 8000b40:	f042 0201 	orr.w	r2, r2, #1
 8000b44:	621a      	str	r2, [r3, #32]
 8000b46:	e5de      	b.n	8000706 <HAL_RCC_OscConfig+0x15a>
 8000b48:	40021000 	.word	0x40021000

08000b4c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000b4c:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <HAL_RCC_GetSysClockFreq+0x4c>)
 8000b4e:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000b50:	f003 010c 	and.w	r1, r3, #12
 8000b54:	2908      	cmp	r1, #8
 8000b56:	d11d      	bne.n	8000b94 <HAL_RCC_GetSysClockFreq+0x48>
{
 8000b58:	b430      	push	{r4, r5}
 8000b5a:	f44f 1070 	mov.w	r0, #3932160	; 0x3c0000
 8000b5e:	fa90 f0a0 	rbit	r0, r0
 8000b62:	210f      	movs	r1, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000b64:	fab0 f080 	clz	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000b68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000b6a:	fa91 f1a1 	rbit	r1, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000b6e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000b72:	40c3      	lsrs	r3, r0
 8000b74:	4809      	ldr	r0, [pc, #36]	; (8000b9c <HAL_RCC_GetSysClockFreq+0x50>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000b76:	4d0a      	ldr	r5, [pc, #40]	; (8000ba0 <HAL_RCC_GetSysClockFreq+0x54>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000b78:	5cc0      	ldrb	r0, [r0, r3]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000b7a:	4c0a      	ldr	r4, [pc, #40]	; (8000ba4 <HAL_RCC_GetSysClockFreq+0x58>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000b7c:	fab1 f181 	clz	r1, r1
 8000b80:	f002 030f 	and.w	r3, r2, #15
 8000b84:	40cb      	lsrs	r3, r1
 8000b86:	5ceb      	ldrb	r3, [r5, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000b88:	fbb4 f3f3 	udiv	r3, r4, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b8c:	bc30      	pop	{r4, r5}
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000b8e:	fb00 f003 	mul.w	r0, r0, r3
}
 8000b92:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8000b96:	4770      	bx	lr
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	080025c0 	.word	0x080025c0
 8000ba0:	080025d0 	.word	0x080025d0
 8000ba4:	007a1200 	.word	0x007a1200

08000ba8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ba8:	4a5f      	ldr	r2, [pc, #380]	; (8000d28 <HAL_RCC_ClockConfig+0x180>)
 8000baa:	6813      	ldr	r3, [r2, #0]
 8000bac:	f003 0307 	and.w	r3, r3, #7
 8000bb0:	428b      	cmp	r3, r1
 8000bb2:	d20b      	bcs.n	8000bcc <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bb4:	6813      	ldr	r3, [r2, #0]
 8000bb6:	f023 0307 	bic.w	r3, r3, #7
 8000bba:	430b      	orrs	r3, r1
 8000bbc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000bbe:	6813      	ldr	r3, [r2, #0]
 8000bc0:	f003 0307 	and.w	r3, r3, #7
 8000bc4:	4299      	cmp	r1, r3
 8000bc6:	d001      	beq.n	8000bcc <HAL_RCC_ClockConfig+0x24>
      return HAL_ERROR;
 8000bc8:	2001      	movs	r0, #1
}
 8000bca:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bcc:	6803      	ldr	r3, [r0, #0]
{
 8000bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bd2:	079c      	lsls	r4, r3, #30
 8000bd4:	d506      	bpl.n	8000be4 <HAL_RCC_ClockConfig+0x3c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bd6:	4c55      	ldr	r4, [pc, #340]	; (8000d2c <HAL_RCC_ClockConfig+0x184>)
 8000bd8:	6885      	ldr	r5, [r0, #8]
 8000bda:	6862      	ldr	r2, [r4, #4]
 8000bdc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000be0:	432a      	orrs	r2, r5
 8000be2:	6062      	str	r2, [r4, #4]
 8000be4:	460c      	mov	r4, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000be6:	07d9      	lsls	r1, r3, #31
 8000be8:	4606      	mov	r6, r0
 8000bea:	d531      	bpl.n	8000c50 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bec:	6842      	ldr	r2, [r0, #4]
 8000bee:	2a01      	cmp	r2, #1
 8000bf0:	f000 8087 	beq.w	8000d02 <HAL_RCC_ClockConfig+0x15a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bf4:	2a02      	cmp	r2, #2
 8000bf6:	bf0c      	ite	eq
 8000bf8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000bfc:	2302      	movne	r3, #2
 8000bfe:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c02:	494a      	ldr	r1, [pc, #296]	; (8000d2c <HAL_RCC_ClockConfig+0x184>)
 8000c04:	6808      	ldr	r0, [r1, #0]
 8000c06:	fa93 f3a3 	rbit	r3, r3
 8000c0a:	fab3 f383 	clz	r3, r3
 8000c0e:	f003 031f 	and.w	r3, r3, #31
 8000c12:	2101      	movs	r1, #1
 8000c14:	fa01 f303 	lsl.w	r3, r1, r3
 8000c18:	4203      	tst	r3, r0
 8000c1a:	d029      	beq.n	8000c70 <HAL_RCC_ClockConfig+0xc8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c1c:	4d43      	ldr	r5, [pc, #268]	; (8000d2c <HAL_RCC_ClockConfig+0x184>)
 8000c1e:	686b      	ldr	r3, [r5, #4]
 8000c20:	f023 0303 	bic.w	r3, r3, #3
 8000c24:	4313      	orrs	r3, r2
 8000c26:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000c28:	f7ff fb16 	bl	8000258 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c2c:	6873      	ldr	r3, [r6, #4]
 8000c2e:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000c30:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c32:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c36:	d023      	beq.n	8000c80 <HAL_RCC_ClockConfig+0xd8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d105      	bne.n	8000c48 <HAL_RCC_ClockConfig+0xa0>
 8000c3c:	e058      	b.n	8000cf0 <HAL_RCC_ClockConfig+0x148>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c3e:	f7ff fb0b 	bl	8000258 <HAL_GetTick>
 8000c42:	1bc0      	subs	r0, r0, r7
 8000c44:	4540      	cmp	r0, r8
 8000c46:	d859      	bhi.n	8000cfc <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c48:	686b      	ldr	r3, [r5, #4]
 8000c4a:	f013 0f0c 	tst.w	r3, #12
 8000c4e:	d1f6      	bne.n	8000c3e <HAL_RCC_ClockConfig+0x96>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c50:	4a35      	ldr	r2, [pc, #212]	; (8000d28 <HAL_RCC_ClockConfig+0x180>)
 8000c52:	6813      	ldr	r3, [r2, #0]
 8000c54:	f003 0307 	and.w	r3, r3, #7
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	d217      	bcs.n	8000c8c <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c5c:	6813      	ldr	r3, [r2, #0]
 8000c5e:	f023 0307 	bic.w	r3, r3, #7
 8000c62:	4323      	orrs	r3, r4
 8000c64:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c66:	6813      	ldr	r3, [r2, #0]
 8000c68:	f003 0307 	and.w	r3, r3, #7
 8000c6c:	429c      	cmp	r4, r3
 8000c6e:	d00d      	beq.n	8000c8c <HAL_RCC_ClockConfig+0xe4>
      return HAL_ERROR;
 8000c70:	2001      	movs	r0, #1
 8000c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c76:	f7ff faef 	bl	8000258 <HAL_GetTick>
 8000c7a:	1bc0      	subs	r0, r0, r7
 8000c7c:	4540      	cmp	r0, r8
 8000c7e:	d83d      	bhi.n	8000cfc <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c80:	686b      	ldr	r3, [r5, #4]
 8000c82:	f003 030c 	and.w	r3, r3, #12
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	d1f5      	bne.n	8000c76 <HAL_RCC_ClockConfig+0xce>
 8000c8a:	e7e1      	b.n	8000c50 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c8c:	6833      	ldr	r3, [r6, #0]
 8000c8e:	075a      	lsls	r2, r3, #29
 8000c90:	d506      	bpl.n	8000ca0 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c92:	4926      	ldr	r1, [pc, #152]	; (8000d2c <HAL_RCC_ClockConfig+0x184>)
 8000c94:	68f0      	ldr	r0, [r6, #12]
 8000c96:	684a      	ldr	r2, [r1, #4]
 8000c98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000c9c:	4302      	orrs	r2, r0
 8000c9e:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ca0:	071b      	lsls	r3, r3, #28
 8000ca2:	d507      	bpl.n	8000cb4 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ca4:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <HAL_RCC_ClockConfig+0x184>)
 8000ca6:	6931      	ldr	r1, [r6, #16]
 8000ca8:	6853      	ldr	r3, [r2, #4]
 8000caa:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000cae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cb2:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000cb4:	f7ff ff4a 	bl	8000b4c <HAL_RCC_GetSysClockFreq>
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <HAL_RCC_ClockConfig+0x184>)
 8000cba:	4601      	mov	r1, r0
 8000cbc:	22f0      	movs	r2, #240	; 0xf0
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	fa92 f2a2 	rbit	r2, r2
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ccc:	40d3      	lsrs	r3, r2
 8000cce:	4818      	ldr	r0, [pc, #96]	; (8000d30 <HAL_RCC_ClockConfig+0x188>)
 8000cd0:	4a18      	ldr	r2, [pc, #96]	; (8000d34 <HAL_RCC_ClockConfig+0x18c>)
 8000cd2:	5cc3      	ldrb	r3, [r0, r3]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cd4:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000cd6:	fa21 f303 	lsr.w	r3, r1, r3
 8000cda:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cdc:	f7ff fa7a 	bl	80001d4 <HAL_InitTick>
  return HAL_OK;
 8000ce0:	2000      	movs	r0, #0
}
 8000ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ce6:	f7ff fab7 	bl	8000258 <HAL_GetTick>
 8000cea:	1bc0      	subs	r0, r0, r7
 8000cec:	4540      	cmp	r0, r8
 8000cee:	d805      	bhi.n	8000cfc <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cf0:	686b      	ldr	r3, [r5, #4]
 8000cf2:	f003 030c 	and.w	r3, r3, #12
 8000cf6:	2b08      	cmp	r3, #8
 8000cf8:	d1f5      	bne.n	8000ce6 <HAL_RCC_ClockConfig+0x13e>
 8000cfa:	e7a9      	b.n	8000c50 <HAL_RCC_ClockConfig+0xa8>
          return HAL_TIMEOUT;
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d06:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0a:	4908      	ldr	r1, [pc, #32]	; (8000d2c <HAL_RCC_ClockConfig+0x184>)
 8000d0c:	6809      	ldr	r1, [r1, #0]
 8000d0e:	fa93 f3a3 	rbit	r3, r3
 8000d12:	fab3 f383 	clz	r3, r3
 8000d16:	f003 031f 	and.w	r3, r3, #31
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	420b      	tst	r3, r1
 8000d20:	f47f af7c 	bne.w	8000c1c <HAL_RCC_ClockConfig+0x74>
 8000d24:	e7a4      	b.n	8000c70 <HAL_RCC_ClockConfig+0xc8>
 8000d26:	bf00      	nop
 8000d28:	40022000 	.word	0x40022000
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	080025e4 	.word	0x080025e4
 8000d34:	20000008 	.word	0x20000008

08000d38 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000d3a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	fa92 f2a2 	rbit	r2, r2
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000d4c:	40d3      	lsrs	r3, r2
 8000d4e:	4904      	ldr	r1, [pc, #16]	; (8000d60 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8000d50:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000d52:	5ccb      	ldrb	r3, [r1, r3]
 8000d54:	6810      	ldr	r0, [r2, #0]
}    
 8000d56:	40d8      	lsrs	r0, r3
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	080025f4 	.word	0x080025f4
 8000d64:	20000008 	.word	0x20000008

08000d68 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000d6a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	fa92 f2a2 	rbit	r2, r2
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000d7c:	40d3      	lsrs	r3, r2
 8000d7e:	4904      	ldr	r1, [pc, #16]	; (8000d90 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8000d80:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000d82:	5ccb      	ldrb	r3, [r1, r3]
 8000d84:	6810      	ldr	r0, [r2, #0]
} 
 8000d86:	40d8      	lsrs	r0, r3
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	080025f4 	.word	0x080025f4
 8000d94:	20000008 	.word	0x20000008

08000d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d9c:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000d9e:	6800      	ldr	r0, [r0, #0]
 8000da0:	03c6      	lsls	r6, r0, #15
{
 8000da2:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000da4:	d53c      	bpl.n	8000e20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000da6:	4ba1      	ldr	r3, [pc, #644]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000da8:	69da      	ldr	r2, [r3, #28]
 8000daa:	00d5      	lsls	r5, r2, #3
 8000dac:	f140 80f2 	bpl.w	8000f94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000db0:	4d9f      	ldr	r5, [pc, #636]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8000db2:	682b      	ldr	r3, [r5, #0]
 8000db4:	05d8      	lsls	r0, r3, #23
    FlagStatus       pwrclkchanged = RESET;
 8000db6:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dba:	f140 80fb 	bpl.w	8000fb4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000dbe:	4d9b      	ldr	r5, [pc, #620]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000dc0:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000dc2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000dc6:	d020      	beq.n	8000e0a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8000dc8:	6861      	ldr	r1, [r4, #4]
 8000dca:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d01c      	beq.n	8000e0c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000dd2:	6a29      	ldr	r1, [r5, #32]
 8000dd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd8:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8000ddc:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000de0:	4f94      	ldr	r7, [pc, #592]	; (8001034 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8000de2:	fab2 f282 	clz	r2, r2
 8000de6:	443a      	add	r2, r7
 8000de8:	0092      	lsls	r2, r2, #2
 8000dea:	f04f 0e01 	mov.w	lr, #1
 8000dee:	f8c2 e000 	str.w	lr, [r2]
 8000df2:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000df6:	fab3 f383 	clz	r3, r3
 8000dfa:	443b      	add	r3, r7
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000e02:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8000e04:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000e06:	f100 80ec 	bmi.w	8000fe2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8000e0a:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000e0c:	4a87      	ldr	r2, [pc, #540]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000e0e:	6a13      	ldr	r3, [r2, #32]
 8000e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e14:	430b      	orrs	r3, r1
 8000e16:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e18:	2e00      	cmp	r6, #0
 8000e1a:	f040 80dd 	bne.w	8000fd8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8000e1e:	6820      	ldr	r0, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000e20:	07c3      	lsls	r3, r0, #31
 8000e22:	d506      	bpl.n	8000e32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000e24:	4a81      	ldr	r2, [pc, #516]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000e26:	68a1      	ldr	r1, [r4, #8]
 8000e28:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e2a:	f023 0303 	bic.w	r3, r3, #3
 8000e2e:	430b      	orrs	r3, r1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000e32:	0787      	lsls	r7, r0, #30
 8000e34:	d506      	bpl.n	8000e44 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000e36:	4a7d      	ldr	r2, [pc, #500]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000e38:	68e1      	ldr	r1, [r4, #12]
 8000e3a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e3c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000e40:	430b      	orrs	r3, r1
 8000e42:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000e44:	0746      	lsls	r6, r0, #29
 8000e46:	d506      	bpl.n	8000e56 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000e48:	4a78      	ldr	r2, [pc, #480]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000e4a:	6921      	ldr	r1, [r4, #16]
 8000e4c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e4e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000e52:	430b      	orrs	r3, r1
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000e56:	0685      	lsls	r5, r0, #26
 8000e58:	d506      	bpl.n	8000e68 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000e5a:	4a74      	ldr	r2, [pc, #464]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000e5c:	69e1      	ldr	r1, [r4, #28]
 8000e5e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e60:	f023 0310 	bic.w	r3, r3, #16
 8000e64:	430b      	orrs	r3, r1
 8000e66:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000e68:	0381      	lsls	r1, r0, #14
 8000e6a:	d506      	bpl.n	8000e7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8000e6c:	4a6f      	ldr	r2, [pc, #444]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000e6e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000e70:	6853      	ldr	r3, [r2, #4]
 8000e72:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000e76:	430b      	orrs	r3, r1
 8000e78:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000e7a:	0642      	lsls	r2, r0, #25
 8000e7c:	d506      	bpl.n	8000e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000e7e:	4a6b      	ldr	r2, [pc, #428]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000e80:	6a21      	ldr	r1, [r4, #32]
 8000e82:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e84:	f023 0320 	bic.w	r3, r3, #32
 8000e88:	430b      	orrs	r3, r1
 8000e8a:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000e8c:	0343      	lsls	r3, r0, #13
 8000e8e:	d506      	bpl.n	8000e9e <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000e90:	4a66      	ldr	r2, [pc, #408]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000e92:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000e94:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e9a:	430b      	orrs	r3, r1
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8000e9e:	0707      	lsls	r7, r0, #28
 8000ea0:	d506      	bpl.n	8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8000ea2:	4a62      	ldr	r2, [pc, #392]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000ea4:	6961      	ldr	r1, [r4, #20]
 8000ea6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ea8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000eac:	430b      	orrs	r3, r1
 8000eae:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8000eb0:	06c6      	lsls	r6, r0, #27
 8000eb2:	d506      	bpl.n	8000ec2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8000eb4:	4a5d      	ldr	r2, [pc, #372]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000eb6:	69a1      	ldr	r1, [r4, #24]
 8000eb8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000eba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000ebe:	430b      	orrs	r3, r1
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8000ec2:	0585      	lsls	r5, r0, #22
 8000ec4:	d506      	bpl.n	8000ed4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000ec6:	4a59      	ldr	r2, [pc, #356]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000ec8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000eca:	6853      	ldr	r3, [r2, #4]
 8000ecc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000ed0:	430b      	orrs	r3, r1
 8000ed2:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8000ed4:	0601      	lsls	r1, r0, #24
 8000ed6:	d506      	bpl.n	8000ee6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8000ed8:	4a54      	ldr	r2, [pc, #336]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000eda:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000edc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000ede:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000ee2:	430b      	orrs	r3, r1
 8000ee4:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8000ee6:	05c2      	lsls	r2, r0, #23
 8000ee8:	d506      	bpl.n	8000ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8000eea:	4a50      	ldr	r2, [pc, #320]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000eec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000eee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000ef0:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8000ef4:	430b      	orrs	r3, r1
 8000ef6:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000ef8:	04c3      	lsls	r3, r0, #19
 8000efa:	d506      	bpl.n	8000f0a <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000efc:	4a4b      	ldr	r2, [pc, #300]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000efe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f00:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f06:	430b      	orrs	r3, r1
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8000f0a:	0487      	lsls	r7, r0, #18
 8000f0c:	d506      	bpl.n	8000f1c <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8000f0e:	4a47      	ldr	r2, [pc, #284]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000f10:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000f12:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f18:	430b      	orrs	r3, r1
 8000f1a:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8000f1c:	02c6      	lsls	r6, r0, #11
 8000f1e:	d506      	bpl.n	8000f2e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8000f20:	4a42      	ldr	r2, [pc, #264]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000f22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000f24:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f2a:	430b      	orrs	r3, r1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8000f2e:	0285      	lsls	r5, r0, #10
 8000f30:	d506      	bpl.n	8000f40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8000f32:	4a3e      	ldr	r2, [pc, #248]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000f34:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000f36:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f38:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8000f40:	0241      	lsls	r1, r0, #9
 8000f42:	d506      	bpl.n	8000f52 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8000f44:	4a39      	ldr	r2, [pc, #228]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000f46:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000f48:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f4e:	430b      	orrs	r3, r1
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8000f52:	0202      	lsls	r2, r0, #8
 8000f54:	d506      	bpl.n	8000f64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8000f56:	4a35      	ldr	r2, [pc, #212]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000f58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000f5a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f60:	430b      	orrs	r3, r1
 8000f62:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8000f64:	01c3      	lsls	r3, r0, #7
 8000f66:	d40d      	bmi.n	8000f84 <HAL_RCCEx_PeriphCLKConfig+0x1ec>

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8000f68:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8000f6c:	d007      	beq.n	8000f7e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8000f6e:	4a2f      	ldr	r2, [pc, #188]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000f70:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000f72:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f78:	430b      	orrs	r3, r1
 8000f7a:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000f7c:	2000      	movs	r0, #0
}
 8000f7e:	b003      	add	sp, #12
 8000f80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8000f84:	4a29      	ldr	r2, [pc, #164]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8000f86:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8000f88:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f8e:	430b      	orrs	r3, r1
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	e7e9      	b.n	8000f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f94:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f96:	4d26      	ldr	r5, [pc, #152]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x298>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f9c:	61da      	str	r2, [r3, #28]
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa8:	682b      	ldr	r3, [r5, #0]
 8000faa:	05d8      	lsls	r0, r3, #23
      pwrclkchanged = SET;
 8000fac:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb0:	f53f af05 	bmi.w	8000dbe <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fb4:	682b      	ldr	r3, [r5, #0]
 8000fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fba:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000fbc:	f7ff f94c 	bl	8000258 <HAL_GetTick>
 8000fc0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc2:	682b      	ldr	r3, [r5, #0]
 8000fc4:	05d9      	lsls	r1, r3, #23
 8000fc6:	f53f aefa 	bmi.w	8000dbe <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fca:	f7ff f945 	bl	8000258 <HAL_GetTick>
 8000fce:	1bc0      	subs	r0, r0, r7
 8000fd0:	2864      	cmp	r0, #100	; 0x64
 8000fd2:	d9f6      	bls.n	8000fc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          return HAL_TIMEOUT;
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	e7d2      	b.n	8000f7e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fd8:	69d3      	ldr	r3, [r2, #28]
 8000fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fde:	61d3      	str	r3, [r2, #28]
 8000fe0:	e71d      	b.n	8000e1e <HAL_RCCEx_PeriphCLKConfig+0x86>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe2:	4677      	mov	r7, lr
        tickstart = HAL_GetTick();
 8000fe4:	f7ff f938 	bl	8000258 <HAL_GetTick>
 8000fe8:	f04f 0902 	mov.w	r9, #2
 8000fec:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fee:	e015      	b.n	800101c <HAL_RCCEx_PeriphCLKConfig+0x284>
 8000ff0:	fa99 f3a9 	rbit	r3, r9
 8000ff4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000ff6:	fa99 f3a9 	rbit	r3, r9
 8000ffa:	fab3 f383 	clz	r3, r3
 8000ffe:	f003 031f 	and.w	r3, r3, #31
 8001002:	fa07 f303 	lsl.w	r3, r7, r3
 8001006:	4213      	tst	r3, r2
 8001008:	f47f aeff 	bne.w	8000e0a <HAL_RCCEx_PeriphCLKConfig+0x72>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800100c:	f7ff f924 	bl	8000258 <HAL_GetTick>
 8001010:	f241 3388 	movw	r3, #5000	; 0x1388
 8001014:	eba0 0008 	sub.w	r0, r0, r8
 8001018:	4298      	cmp	r0, r3
 800101a:	d8db      	bhi.n	8000fd4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800101c:	fa99 f3a9 	rbit	r3, r9
 8001020:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001024:	2b00      	cmp	r3, #0
 8001026:	d0e3      	beq.n	8000ff0 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8001028:	6a2a      	ldr	r2, [r5, #32]
 800102a:	e7e4      	b.n	8000ff6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800102c:	40021000 	.word	0x40021000
 8001030:	40007000 	.word	0x40007000
 8001034:	10908100 	.word	0x10908100

08001038 <HAL_TIM_PWM_MspInit>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <HAL_TIM_PWM_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800103c:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800103e:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001040:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8001042:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 8001046:	ea20 0001 	bic.w	r0, r0, r1
{
 800104a:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 800104c:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800104e:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8001050:	4c11      	ldr	r4, [pc, #68]	; (8001098 <HAL_TIM_PWM_Start+0x5c>)
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001052:	4311      	orrs	r1, r2
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8001054:	42a3      	cmp	r3, r4
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001056:	6219      	str	r1, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8001058:	d012      	beq.n	8001080 <HAL_TIM_PWM_Start+0x44>
 800105a:	4a10      	ldr	r2, [pc, #64]	; (800109c <HAL_TIM_PWM_Start+0x60>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d00f      	beq.n	8001080 <HAL_TIM_PWM_Start+0x44>
 8001060:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8001064:	4293      	cmp	r3, r2
 8001066:	d00b      	beq.n	8001080 <HAL_TIM_PWM_Start+0x44>
 8001068:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800106c:	4293      	cmp	r3, r2
 800106e:	d007      	beq.n	8001080 <HAL_TIM_PWM_Start+0x44>
 8001070:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001074:	4293      	cmp	r3, r2
 8001076:	d003      	beq.n	8001080 <HAL_TIM_PWM_Start+0x44>
 8001078:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800107c:	4293      	cmp	r3, r2
 800107e:	d103      	bne.n	8001088 <HAL_TIM_PWM_Start+0x4c>
    __HAL_TIM_MOE_ENABLE(htim);
 8001080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001086:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001088:	681a      	ldr	r2, [r3, #0]
} 
 800108a:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_TIM_ENABLE(htim);
 800108e:	f042 0201 	orr.w	r2, r2, #1
} 
 8001092:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001094:	601a      	str	r2, [r3, #0]
} 
 8001096:	4770      	bx	lr
 8001098:	40012c00 	.word	0x40012c00
 800109c:	40013400 	.word	0x40013400

080010a0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80010a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d040      	beq.n	800112a <HAL_TIM_ConfigClockSource+0x8a>
  htim->State = HAL_TIM_STATE_BUSY;
 80010a8:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 80010aa:	6803      	ldr	r3, [r0, #0]
{
 80010ac:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80010ae:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80010b2:	689d      	ldr	r5, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80010b4:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80010b6:	4a5d      	ldr	r2, [pc, #372]	; (800122c <HAL_TIM_ConfigClockSource+0x18c>)
  switch (sClockSourceConfig->ClockSource)
 80010b8:	2c40      	cmp	r4, #64	; 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80010ba:	ea02 0205 	and.w	r2, r2, r5
  __HAL_LOCK(htim);
 80010be:	f04f 0501 	mov.w	r5, #1
 80010c2:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 80010c6:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80010c8:	d079      	beq.n	80011be <HAL_TIM_ConfigClockSource+0x11e>
 80010ca:	d918      	bls.n	80010fe <HAL_TIM_ConfigClockSource+0x5e>
 80010cc:	2c70      	cmp	r4, #112	; 0x70
 80010ce:	d062      	beq.n	8001196 <HAL_TIM_ConfigClockSource+0xf6>
 80010d0:	d92d      	bls.n	800112e <HAL_TIM_ConfigClockSource+0x8e>
 80010d2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80010d6:	d057      	beq.n	8001188 <HAL_TIM_ConfigClockSource+0xe8>
 80010d8:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80010dc:	d11c      	bne.n	8001118 <HAL_TIM_ConfigClockSource+0x78>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80010de:	688a      	ldr	r2, [r1, #8]
 80010e0:	684d      	ldr	r5, [r1, #4]
 80010e2:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80010e4:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80010e6:	432a      	orrs	r2, r5
 80010e8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80010ec:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80010f0:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80010f2:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010fa:	609a      	str	r2, [r3, #8]
    break;
 80010fc:	e00c      	b.n	8001118 <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 80010fe:	2c10      	cmp	r4, #16
 8001100:	d032      	beq.n	8001168 <HAL_TIM_ConfigClockSource+0xc8>
 8001102:	d938      	bls.n	8001176 <HAL_TIM_ConfigClockSource+0xd6>
 8001104:	2c20      	cmp	r4, #32
 8001106:	d072      	beq.n	80011ee <HAL_TIM_ConfigClockSource+0x14e>
 8001108:	2c30      	cmp	r4, #48	; 0x30
 800110a:	d105      	bne.n	8001118 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 800110c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800110e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001112:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 8001116:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8001118:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800111a:	2201      	movs	r2, #1
 800111c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001120:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8001124:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8001126:	4618      	mov	r0, r3
}
 8001128:	4770      	bx	lr
  __HAL_LOCK(htim);
 800112a:	2002      	movs	r0, #2
 800112c:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800112e:	2c50      	cmp	r4, #80	; 0x50
 8001130:	d064      	beq.n	80011fc <HAL_TIM_ConfigClockSource+0x15c>
 8001132:	2c60      	cmp	r4, #96	; 0x60
 8001134:	d1f0      	bne.n	8001118 <HAL_TIM_ConfigClockSource+0x78>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001136:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001138:	684d      	ldr	r5, [r1, #4]
 800113a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800113c:	f024 0410 	bic.w	r4, r4, #16
 8001140:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001142:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001144:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001146:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800114a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800114e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001152:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001156:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001158:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800115a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800115c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001160:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	e7d7      	b.n	8001118 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8001168:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800116a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800116e:	f042 0217 	orr.w	r2, r2, #23
   TIMx->SMCR = tmpsmcr;
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	e7d0      	b.n	8001118 <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 8001176:	2c00      	cmp	r4, #0
 8001178:	d1ce      	bne.n	8001118 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 800117a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800117c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001180:	f042 0207 	orr.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	e7c7      	b.n	8001118 <HAL_TIM_ConfigClockSource+0x78>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800118e:	f022 0207 	bic.w	r2, r2, #7
 8001192:	609a      	str	r2, [r3, #8]
    break;
 8001194:	e7c0      	b.n	8001118 <HAL_TIM_ConfigClockSource+0x78>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001196:	688a      	ldr	r2, [r1, #8]
 8001198:	684d      	ldr	r5, [r1, #4]
 800119a:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800119c:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800119e:	432a      	orrs	r2, r5
 80011a0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80011a4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80011a8:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80011aa:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80011ac:	689a      	ldr	r2, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80011ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011b2:	f022 0277 	bic.w	r2, r2, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80011b6:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80011ba:	609a      	str	r2, [r3, #8]
    break;
 80011bc:	e7ac      	b.n	8001118 <HAL_TIM_ConfigClockSource+0x78>
  tmpccer = TIMx->CCER;
 80011be:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80011c0:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80011c2:	684c      	ldr	r4, [r1, #4]
 80011c4:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80011c6:	f026 0601 	bic.w	r6, r6, #1
 80011ca:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80011cc:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80011ce:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80011d2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80011d6:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80011da:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80011dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80011de:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80011e0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80011e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80011e6:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	e794      	b.n	8001118 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 80011ee:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80011f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80011f4:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	e78d      	b.n	8001118 <HAL_TIM_ConfigClockSource+0x78>
  tmpccer = TIMx->CCER;
 80011fc:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80011fe:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001200:	684c      	ldr	r4, [r1, #4]
 8001202:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001204:	f026 0601 	bic.w	r6, r6, #1
 8001208:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800120a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800120c:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001210:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001214:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001218:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800121a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800121c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800121e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001220:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001224:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	e775      	b.n	8001118 <HAL_TIM_ConfigClockSource+0x78>
 800122c:	fffe0088 	.word	0xfffe0088

08001230 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001230:	4a45      	ldr	r2, [pc, #276]	; (8001348 <TIM_Base_SetConfig+0x118>)
  tmpcr1 = TIMx->CR1;
 8001232:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001234:	4290      	cmp	r0, r2
{
 8001236:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001238:	d067      	beq.n	800130a <TIM_Base_SetConfig+0xda>
 800123a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800123e:	d06b      	beq.n	8001318 <TIM_Base_SetConfig+0xe8>
 8001240:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001244:	4290      	cmp	r0, r2
 8001246:	d027      	beq.n	8001298 <TIM_Base_SetConfig+0x68>
 8001248:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800124c:	4290      	cmp	r0, r2
 800124e:	d023      	beq.n	8001298 <TIM_Base_SetConfig+0x68>
 8001250:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001254:	4290      	cmp	r0, r2
 8001256:	d01f      	beq.n	8001298 <TIM_Base_SetConfig+0x68>
 8001258:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800125c:	4290      	cmp	r0, r2
 800125e:	d06d      	beq.n	800133c <TIM_Base_SetConfig+0x10c>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001260:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 8001264:	4290      	cmp	r0, r2
 8001266:	d040      	beq.n	80012ea <TIM_Base_SetConfig+0xba>
 8001268:	4a38      	ldr	r2, [pc, #224]	; (800134c <TIM_Base_SetConfig+0x11c>)
 800126a:	4290      	cmp	r0, r2
 800126c:	d03d      	beq.n	80012ea <TIM_Base_SetConfig+0xba>
 800126e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001272:	4290      	cmp	r0, r2
 8001274:	d039      	beq.n	80012ea <TIM_Base_SetConfig+0xba>
 8001276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800127a:	4290      	cmp	r0, r2
 800127c:	d035      	beq.n	80012ea <TIM_Base_SetConfig+0xba>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800127e:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001280:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001282:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001288:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800128a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800128c:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800128e:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8001290:	2301      	movs	r3, #1
 8001292:	6143      	str	r3, [r0, #20]
}
 8001294:	bcf0      	pop	{r4, r5, r6, r7}
 8001296:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8001298:	684a      	ldr	r2, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800129a:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800129c:	694c      	ldr	r4, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800129e:	688f      	ldr	r7, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80012a0:	680d      	ldr	r5, [r1, #0]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80012a6:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80012a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80012ac:	4a28      	ldr	r2, [pc, #160]	; (8001350 <TIM_Base_SetConfig+0x120>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012ae:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80012b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012b4:	4323      	orrs	r3, r4
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80012b6:	4290      	cmp	r0, r2
  TIMx->CR1 = tmpcr1;
 80012b8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80012ba:	62c7      	str	r7, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80012bc:	6285      	str	r5, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80012be:	d00e      	beq.n	80012de <TIM_Base_SetConfig+0xae>
 80012c0:	4b24      	ldr	r3, [pc, #144]	; (8001354 <TIM_Base_SetConfig+0x124>)
 80012c2:	4298      	cmp	r0, r3
 80012c4:	d00b      	beq.n	80012de <TIM_Base_SetConfig+0xae>
 80012c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012ca:	4298      	cmp	r0, r3
 80012cc:	d007      	beq.n	80012de <TIM_Base_SetConfig+0xae>
 80012ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012d2:	4298      	cmp	r0, r3
 80012d4:	d003      	beq.n	80012de <TIM_Base_SetConfig+0xae>
 80012d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012da:	4298      	cmp	r0, r3
 80012dc:	d1d8      	bne.n	8001290 <TIM_Base_SetConfig+0x60>
    TIMx->RCR = Structure->RepetitionCounter;
 80012de:	690b      	ldr	r3, [r1, #16]
 80012e0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80012e2:	2301      	movs	r3, #1
 80012e4:	6143      	str	r3, [r0, #20]
}
 80012e6:	bcf0      	pop	{r4, r5, r6, r7}
 80012e8:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012ea:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80012ec:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 80012ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012f2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80012f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012f8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80012fa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80012fc:	688b      	ldr	r3, [r1, #8]
 80012fe:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001300:	680b      	ldr	r3, [r1, #0]
 8001302:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001304:	690b      	ldr	r3, [r1, #16]
 8001306:	6303      	str	r3, [r0, #48]	; 0x30
 8001308:	e7eb      	b.n	80012e2 <TIM_Base_SetConfig+0xb2>
    tmpcr1 |= Structure->CounterMode;
 800130a:	684d      	ldr	r5, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800130c:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800130e:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001314:	432b      	orrs	r3, r5
 8001316:	e7ea      	b.n	80012ee <TIM_Base_SetConfig+0xbe>
 8001318:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800131a:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800131c:	694a      	ldr	r2, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800131e:	688f      	ldr	r7, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001320:	680d      	ldr	r5, [r1, #0]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001326:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8001328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800132c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800132e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001332:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001334:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001336:	62c7      	str	r7, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001338:	6285      	str	r5, [r0, #40]	; 0x28
 800133a:	e7c1      	b.n	80012c0 <TIM_Base_SetConfig+0x90>
    tmpcr1 |= Structure->CounterMode;
 800133c:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800133e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001342:	4313      	orrs	r3, r2
 8001344:	e790      	b.n	8001268 <TIM_Base_SetConfig+0x38>
 8001346:	bf00      	nop
 8001348:	40012c00 	.word	0x40012c00
 800134c:	40014400 	.word	0x40014400
 8001350:	40013400 	.word	0x40013400
 8001354:	40014000 	.word	0x40014000

08001358 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8001358:	b1b8      	cbz	r0, 800138a <HAL_TIM_Base_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 800135a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{ 
 800135e:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8001360:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001364:	4604      	mov	r4, r0
 8001366:	b15b      	cbz	r3, 8001380 <HAL_TIM_Base_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;
 8001368:	2302      	movs	r3, #2
 800136a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800136e:	6820      	ldr	r0, [r4, #0]
 8001370:	1d21      	adds	r1, r4, #4
 8001372:	f7ff ff5d 	bl	8001230 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001376:	2301      	movs	r3, #1
 8001378:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800137c:	2000      	movs	r0, #0
 800137e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001380:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001384:	f000 ffc2 	bl	800230c <HAL_TIM_Base_MspInit>
 8001388:	e7ee      	b.n	8001368 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800138a:	2001      	movs	r0, #1
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop

08001390 <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 8001390:	b1b8      	cbz	r0, 80013c2 <HAL_TIM_PWM_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001392:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8001396:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8001398:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800139c:	4604      	mov	r4, r0
 800139e:	b15b      	cbz	r3, 80013b8 <HAL_TIM_PWM_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;
 80013a0:	2302      	movs	r3, #2
 80013a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80013a6:	6820      	ldr	r0, [r4, #0]
 80013a8:	1d21      	adds	r1, r4, #4
 80013aa:	f7ff ff41 	bl	8001230 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80013ae:	2301      	movs	r3, #1
 80013b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80013b4:	2000      	movs	r0, #0
 80013b6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80013b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80013bc:	f7ff fe3c 	bl	8001038 <HAL_TIM_PWM_MspInit>
 80013c0:	e7ee      	b.n	80013a0 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 80013c2:	2001      	movs	r0, #1
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop

080013c8 <TIM_OC1_SetConfig>:
{
 80013c8:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013ca:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= OC_Config->OCPolarity;
 80013cc:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80013ce:	680e      	ldr	r6, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80013d0:	4d1c      	ldr	r5, [pc, #112]	; (8001444 <TIM_OC1_SetConfig+0x7c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013d2:	f024 0401 	bic.w	r4, r4, #1
 80013d6:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80013d8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 80013da:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80013dc:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80013de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 80013e2:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80013e6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80013ea:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 80013ec:	ea43 0307 	orr.w	r3, r3, r7
  tmpccmrx |= OC_Config->OCMode;
 80013f0:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80013f4:	d013      	beq.n	800141e <TIM_OC1_SetConfig+0x56>
 80013f6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80013fa:	42a8      	cmp	r0, r5
 80013fc:	d00f      	beq.n	800141e <TIM_OC1_SetConfig+0x56>
 80013fe:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001402:	42a8      	cmp	r0, r5
 8001404:	d00b      	beq.n	800141e <TIM_OC1_SetConfig+0x56>
 8001406:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800140a:	42a8      	cmp	r0, r5
 800140c:	d007      	beq.n	800141e <TIM_OC1_SetConfig+0x56>
 800140e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001412:	42a8      	cmp	r0, r5
 8001414:	d003      	beq.n	800141e <TIM_OC1_SetConfig+0x56>
 8001416:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800141a:	42a8      	cmp	r0, r5
 800141c:	d10b      	bne.n	8001436 <TIM_OC1_SetConfig+0x6e>
    tmpccer |= OC_Config->OCNPolarity;
 800141e:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001420:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001422:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001426:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8001428:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800142a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800142e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001430:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001434:	432c      	orrs	r4, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8001436:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001438:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800143a:	6182      	str	r2, [r0, #24]
} 
 800143c:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 800143e:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 8001440:	6203      	str	r3, [r0, #32]
} 
 8001442:	4770      	bx	lr
 8001444:	40012c00 	.word	0x40012c00

08001448 <TIM_OC2_SetConfig>:
{
 8001448:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800144a:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800144c:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800144e:	680e      	ldr	r6, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001450:	4d23      	ldr	r5, [pc, #140]	; (80014e0 <TIM_OC2_SetConfig+0x98>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001452:	f024 0410 	bic.w	r4, r4, #16
 8001456:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8001458:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 800145a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800145c:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800145e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8001462:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001466:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800146a:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800146c:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001470:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001474:	d024      	beq.n	80014c0 <TIM_OC2_SetConfig+0x78>
 8001476:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800147a:	42a8      	cmp	r0, r5
 800147c:	d020      	beq.n	80014c0 <TIM_OC2_SetConfig+0x78>
 800147e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8001482:	42a8      	cmp	r0, r5
 8001484:	d024      	beq.n	80014d0 <TIM_OC2_SetConfig+0x88>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001486:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
 800148a:	42a8      	cmp	r0, r5
 800148c:	d00a      	beq.n	80014a4 <TIM_OC2_SetConfig+0x5c>
 800148e:	4d15      	ldr	r5, [pc, #84]	; (80014e4 <TIM_OC2_SetConfig+0x9c>)
 8001490:	42a8      	cmp	r0, r5
 8001492:	d007      	beq.n	80014a4 <TIM_OC2_SetConfig+0x5c>
 8001494:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001498:	42a8      	cmp	r0, r5
 800149a:	d003      	beq.n	80014a4 <TIM_OC2_SetConfig+0x5c>
 800149c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80014a0:	42a8      	cmp	r0, r5
 80014a2:	d106      	bne.n	80014b2 <TIM_OC2_SetConfig+0x6a>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80014a4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80014a6:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80014a8:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80014ac:	4335      	orrs	r5, r6
 80014ae:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80014b2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80014b4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80014b6:	6182      	str	r2, [r0, #24]
}
 80014b8:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 80014ba:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;  
 80014bc:	6203      	str	r3, [r0, #32]
}
 80014be:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80014c0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80014c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80014c6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80014ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014ce:	e7e9      	b.n	80014a4 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80014d0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80014d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80014d6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80014da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014de:	e7d6      	b.n	800148e <TIM_OC2_SetConfig+0x46>
 80014e0:	40012c00 	.word	0x40012c00
 80014e4:	40014400 	.word	0x40014400

080014e8 <TIM_OC3_SetConfig>:
{
 80014e8:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80014ea:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80014ec:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80014ee:	680e      	ldr	r6, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80014f0:	4d23      	ldr	r5, [pc, #140]	; (8001580 <TIM_OC3_SetConfig+0x98>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80014f2:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80014f6:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80014f8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 80014fa:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80014fc:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80014fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 8001502:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001506:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800150a:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800150c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8001510:	ea42 0206 	orr.w	r2, r2, r6
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001514:	d024      	beq.n	8001560 <TIM_OC3_SetConfig+0x78>
 8001516:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800151a:	42a8      	cmp	r0, r5
 800151c:	d020      	beq.n	8001560 <TIM_OC3_SetConfig+0x78>
 800151e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8001522:	42a8      	cmp	r0, r5
 8001524:	d024      	beq.n	8001570 <TIM_OC3_SetConfig+0x88>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001526:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
 800152a:	42a8      	cmp	r0, r5
 800152c:	d00a      	beq.n	8001544 <TIM_OC3_SetConfig+0x5c>
 800152e:	4d15      	ldr	r5, [pc, #84]	; (8001584 <TIM_OC3_SetConfig+0x9c>)
 8001530:	42a8      	cmp	r0, r5
 8001532:	d007      	beq.n	8001544 <TIM_OC3_SetConfig+0x5c>
 8001534:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001538:	42a8      	cmp	r0, r5
 800153a:	d003      	beq.n	8001544 <TIM_OC3_SetConfig+0x5c>
 800153c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001540:	42a8      	cmp	r0, r5
 8001542:	d106      	bne.n	8001552 <TIM_OC3_SetConfig+0x6a>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001544:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001546:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001548:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800154c:	4335      	orrs	r5, r6
 800154e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  TIMx->CCR3 = OC_Config->Pulse;
 8001552:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001554:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001556:	61c2      	str	r2, [r0, #28]
}
 8001558:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 800155a:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;  
 800155c:	6203      	str	r3, [r0, #32]
}
 800155e:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001560:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001562:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001566:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800156a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800156e:	e7e9      	b.n	8001544 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001570:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001576:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800157a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800157e:	e7d6      	b.n	800152e <TIM_OC3_SetConfig+0x46>
 8001580:	40012c00 	.word	0x40012c00
 8001584:	40014400 	.word	0x40014400

08001588 <TIM_OC4_SetConfig>:
{
 8001588:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800158a:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800158c:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800158e:	680e      	ldr	r6, [r1, #0]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001590:	4d19      	ldr	r5, [pc, #100]	; (80015f8 <TIM_OC4_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001592:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001596:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8001598:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 800159a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800159c:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800159e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 80015a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80015a6:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80015aa:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80015ac:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80015b0:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80015b4:	d013      	beq.n	80015de <TIM_OC4_SetConfig+0x56>
 80015b6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80015ba:	42a8      	cmp	r0, r5
 80015bc:	d00f      	beq.n	80015de <TIM_OC4_SetConfig+0x56>
 80015be:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80015c2:	42a8      	cmp	r0, r5
 80015c4:	d00b      	beq.n	80015de <TIM_OC4_SetConfig+0x56>
 80015c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015ca:	42a8      	cmp	r0, r5
 80015cc:	d007      	beq.n	80015de <TIM_OC4_SetConfig+0x56>
 80015ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015d2:	42a8      	cmp	r0, r5
 80015d4:	d003      	beq.n	80015de <TIM_OC4_SetConfig+0x56>
 80015d6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80015da:	42a8      	cmp	r0, r5
 80015dc:	d104      	bne.n	80015e8 <TIM_OC4_SetConfig+0x60>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80015de:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80015e0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80015e4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 80015e8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80015ea:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80015ec:	61c3      	str	r3, [r0, #28]
}
 80015ee:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 80015f0:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;  
 80015f2:	6202      	str	r2, [r0, #32]
}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40012c00 	.word	0x40012c00

080015fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 80015fc:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80015fe:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001600:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8001602:	680e      	ldr	r6, [r1, #0]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001604:	4d19      	ldr	r5, [pc, #100]	; (800166c <TIM_OC5_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001606:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800160a:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800160c:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 800160e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8001610:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8001616:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800161a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800161e:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001620:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8001624:	ea43 0306 	orr.w	r3, r3, r6
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001628:	d013      	beq.n	8001652 <TIM_OC5_SetConfig+0x56>
 800162a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800162e:	42a8      	cmp	r0, r5
 8001630:	d00f      	beq.n	8001652 <TIM_OC5_SetConfig+0x56>
 8001632:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001636:	42a8      	cmp	r0, r5
 8001638:	d00b      	beq.n	8001652 <TIM_OC5_SetConfig+0x56>
 800163a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800163e:	42a8      	cmp	r0, r5
 8001640:	d007      	beq.n	8001652 <TIM_OC5_SetConfig+0x56>
 8001642:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001646:	42a8      	cmp	r0, r5
 8001648:	d003      	beq.n	8001652 <TIM_OC5_SetConfig+0x56>
 800164a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800164e:	42a8      	cmp	r0, r5
 8001650:	d104      	bne.n	800165c <TIM_OC5_SetConfig+0x60>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001652:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001654:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001658:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800165c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800165e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8001660:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
}
 8001662:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR5 = OC_Config->Pulse;
 8001664:	6581      	str	r1, [r0, #88]	; 0x58
  TIMx->CCER = tmpccer;  
 8001666:	6202      	str	r2, [r0, #32]
}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40012c00 	.word	0x40012c00

08001670 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001670:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001672:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001674:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001676:	680e      	ldr	r6, [r1, #0]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001678:	4d19      	ldr	r5, [pc, #100]	; (80016e0 <TIM_OC6_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800167a:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
 800167e:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8001680:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 8001682:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8001684:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001686:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800168a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800168e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001692:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001694:	ea42 5207 	orr.w	r2, r2, r7, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001698:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800169c:	d013      	beq.n	80016c6 <TIM_OC6_SetConfig+0x56>
 800169e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80016a2:	42a8      	cmp	r0, r5
 80016a4:	d00f      	beq.n	80016c6 <TIM_OC6_SetConfig+0x56>
 80016a6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80016aa:	42a8      	cmp	r0, r5
 80016ac:	d00b      	beq.n	80016c6 <TIM_OC6_SetConfig+0x56>
 80016ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016b2:	42a8      	cmp	r0, r5
 80016b4:	d007      	beq.n	80016c6 <TIM_OC6_SetConfig+0x56>
 80016b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016ba:	42a8      	cmp	r0, r5
 80016bc:	d003      	beq.n	80016c6 <TIM_OC6_SetConfig+0x56>
 80016be:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80016c2:	42a8      	cmp	r0, r5
 80016c4:	d104      	bne.n	80016d0 <TIM_OC6_SetConfig+0x60>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80016c6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80016c8:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80016cc:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80016d0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80016d2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 80016d4:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
} 
 80016d6:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR6 = OC_Config->Pulse;
 80016d8:	65c1      	str	r1, [r0, #92]	; 0x5c
  TIMx->CCER = tmpccer;  
 80016da:	6202      	str	r2, [r0, #32]
} 
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40012c00 	.word	0x40012c00

080016e4 <HAL_TIM_PWM_ConfigChannel>:
{
 80016e4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80016e6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d02f      	beq.n	800174e <HAL_TIM_PWM_ConfigChannel+0x6a>
 80016ee:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 80016f0:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80016f2:	2101      	movs	r1, #1
 80016f4:	4604      	mov	r4, r0
 80016f6:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80016fa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80016fe:	2a14      	cmp	r2, #20
 8001700:	d81e      	bhi.n	8001740 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001702:	e8df f002 	tbb	[pc, r2]
 8001706:	1d39      	.short	0x1d39
 8001708:	1d4b1d1d 	.word	0x1d4b1d1d
 800170c:	1d5e1d1d 	.word	0x1d5e1d1d
 8001710:	1d0b1d1d 	.word	0x1d0b1d1d
 8001714:	1d701d1d 	.word	0x1d701d1d
 8001718:	1d1d      	.short	0x1d1d
 800171a:	26          	.byte	0x26
 800171b:	00          	.byte	0x00
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800171c:	4629      	mov	r1, r5
 800171e:	6800      	ldr	r0, [r0, #0]
 8001720:	f7ff ff32 	bl	8001588 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001724:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001726:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001728:	69d9      	ldr	r1, [r3, #28]
 800172a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800172e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001730:	69d9      	ldr	r1, [r3, #28]
 8001732:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001736:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001738:	69da      	ldr	r2, [r3, #28]
 800173a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800173e:	61da      	str	r2, [r3, #28]
  htim->State = HAL_TIM_STATE_READY;
 8001740:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001742:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001744:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001748:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800174c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800174e:	2002      	movs	r0, #2
}
 8001750:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001752:	4629      	mov	r1, r5
 8001754:	6800      	ldr	r0, [r0, #0]
 8001756:	f7ff ff8b 	bl	8001670 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800175a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 800175c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800175e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001760:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001764:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001766:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001768:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800176c:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 800176e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001770:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001774:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8001776:	e7e3      	b.n	8001740 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001778:	4629      	mov	r1, r5
 800177a:	6800      	ldr	r0, [r0, #0]
 800177c:	f7ff fe24 	bl	80013c8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001780:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001782:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001784:	6999      	ldr	r1, [r3, #24]
 8001786:	f041 0108 	orr.w	r1, r1, #8
 800178a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800178c:	6999      	ldr	r1, [r3, #24]
 800178e:	f021 0104 	bic.w	r1, r1, #4
 8001792:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001794:	699a      	ldr	r2, [r3, #24]
 8001796:	4302      	orrs	r2, r0
 8001798:	619a      	str	r2, [r3, #24]
    break;
 800179a:	e7d1      	b.n	8001740 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800179c:	4629      	mov	r1, r5
 800179e:	6800      	ldr	r0, [r0, #0]
 80017a0:	f7ff fe52 	bl	8001448 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80017a4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80017a6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80017a8:	6999      	ldr	r1, [r3, #24]
 80017aa:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80017ae:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80017b0:	6999      	ldr	r1, [r3, #24]
 80017b2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80017b6:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80017b8:	699a      	ldr	r2, [r3, #24]
 80017ba:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80017be:	619a      	str	r2, [r3, #24]
    break;
 80017c0:	e7be      	b.n	8001740 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80017c2:	4629      	mov	r1, r5
 80017c4:	6800      	ldr	r0, [r0, #0]
 80017c6:	f7ff fe8f 	bl	80014e8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80017ca:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80017cc:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80017ce:	69d9      	ldr	r1, [r3, #28]
 80017d0:	f041 0108 	orr.w	r1, r1, #8
 80017d4:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80017d6:	69d9      	ldr	r1, [r3, #28]
 80017d8:	f021 0104 	bic.w	r1, r1, #4
 80017dc:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80017de:	69da      	ldr	r2, [r3, #28]
 80017e0:	4302      	orrs	r2, r0
 80017e2:	61da      	str	r2, [r3, #28]
    break;
 80017e4:	e7ac      	b.n	8001740 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80017e6:	4629      	mov	r1, r5
 80017e8:	6800      	ldr	r0, [r0, #0]
 80017ea:	f7ff ff07 	bl	80015fc <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80017ee:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80017f0:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80017f2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80017f4:	f041 0108 	orr.w	r1, r1, #8
 80017f8:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80017fa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80017fc:	f021 0104 	bic.w	r1, r1, #4
 8001800:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8001802:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001804:	4302      	orrs	r2, r0
 8001806:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8001808:	e79a      	b.n	8001740 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800180a:	bf00      	nop

0800180c <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 800180c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001810:	2b01      	cmp	r3, #1
 8001812:	d023      	beq.n	800185c <HAL_TIMEx_MasterConfigSynchronization+0x50>
  tmpcr2 = htim->Instance->CR2;
 8001814:	6803      	ldr	r3, [r0, #0]
{
 8001816:	b470      	push	{r4, r5, r6}
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001818:	4d12      	ldr	r5, [pc, #72]	; (8001864 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
  tmpcr2 = htim->Instance->CR2;
 800181a:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800181c:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800181e:	42ab      	cmp	r3, r5
 8001820:	d017      	beq.n	8001852 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8001822:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001826:	42ab      	cmp	r3, r5
 8001828:	d013      	beq.n	8001852 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800182a:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800182e:	42ab      	cmp	r3, r5
 8001830:	d00f      	beq.n	8001852 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001832:	680e      	ldr	r6, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001834:	688d      	ldr	r5, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001836:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 800183a:	f024 0180 	bic.w	r1, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800183e:	4332      	orrs	r2, r6
  __HAL_UNLOCK(htim);
 8001840:	2400      	movs	r4, #0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001842:	4329      	orrs	r1, r5
  htim->Instance->CR2 = tmpcr2;
 8001844:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR = tmpsmcr;
 8001846:	6099      	str	r1, [r3, #8]
  __HAL_UNLOCK(htim);
 8001848:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
} 
 800184c:	4620      	mov	r0, r4
 800184e:	bc70      	pop	{r4, r5, r6}
 8001850:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001852:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001854:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001858:	432a      	orrs	r2, r5
 800185a:	e7ea      	b.n	8001832 <HAL_TIMEx_MasterConfigSynchronization+0x26>
  __HAL_LOCK(htim);
 800185c:	2202      	movs	r2, #2
} 
 800185e:	4610      	mov	r0, r2
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40012c00 	.word	0x40012c00

08001868 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800186a:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800186c:	6907      	ldr	r7, [r0, #16]
 800186e:	6883      	ldr	r3, [r0, #8]
 8001870:	6946      	ldr	r6, [r0, #20]
 8001872:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001874:	4a8d      	ldr	r2, [pc, #564]	; (8001aac <UART_SetConfig+0x244>)
{
 8001876:	4605      	mov	r5, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001878:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800187a:	6820      	ldr	r0, [r4, #0]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800187c:	6a2f      	ldr	r7, [r5, #32]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800187e:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001880:	4002      	ands	r2, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001882:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001884:	4313      	orrs	r3, r2
 8001886:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001888:	6862      	ldr	r2, [r4, #4]
 800188a:	68ee      	ldr	r6, [r5, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800188c:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800188e:	4888      	ldr	r0, [pc, #544]	; (8001ab0 <UART_SetConfig+0x248>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001890:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001894:	4332      	orrs	r2, r6
 8001896:	6062      	str	r2, [r4, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001898:	68a2      	ldr	r2, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800189a:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800189c:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80018a0:	4313      	orrs	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018a2:	4284      	cmp	r4, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80018a4:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018a6:	d03f      	beq.n	8001928 <UART_SetConfig+0xc0>
 80018a8:	4b82      	ldr	r3, [pc, #520]	; (8001ab4 <UART_SetConfig+0x24c>)
 80018aa:	429c      	cmp	r4, r3
 80018ac:	d05e      	beq.n	800196c <UART_SetConfig+0x104>
 80018ae:	4b82      	ldr	r3, [pc, #520]	; (8001ab8 <UART_SetConfig+0x250>)
 80018b0:	429c      	cmp	r4, r3
 80018b2:	d06b      	beq.n	800198c <UART_SetConfig+0x124>
 80018b4:	4b81      	ldr	r3, [pc, #516]	; (8001abc <UART_SetConfig+0x254>)
 80018b6:	429c      	cmp	r4, r3
 80018b8:	d01a      	beq.n	80018f0 <UART_SetConfig+0x88>
 80018ba:	4b81      	ldr	r3, [pc, #516]	; (8001ac0 <UART_SetConfig+0x258>)
 80018bc:	429c      	cmp	r4, r3
 80018be:	d005      	beq.n	80018cc <UART_SetConfig+0x64>

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018c0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80018c4:	f000 80ca 	beq.w	8001a5c <UART_SetConfig+0x1f4>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80018c8:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 80018ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018cc:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80018d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018da:	f000 8085 	beq.w	80019e8 <UART_SetConfig+0x180>
 80018de:	d910      	bls.n	8001902 <UART_SetConfig+0x9a>
 80018e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80018e4:	d05e      	beq.n	80019a4 <UART_SetConfig+0x13c>
 80018e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80018ea:	f000 808a 	beq.w	8001a02 <UART_SetConfig+0x19a>
 80018ee:	e7e7      	b.n	80018c0 <UART_SetConfig+0x58>
 80018f0:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80018fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018fe:	d05e      	beq.n	80019be <UART_SetConfig+0x156>
 8001900:	d878      	bhi.n	80019f4 <UART_SetConfig+0x18c>
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1dc      	bne.n	80018c0 <UART_SetConfig+0x58>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001906:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800190a:	d102      	bne.n	8001912 <UART_SetConfig+0xaa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800190c:	f7ff fa14 	bl	8000d38 <HAL_RCC_GetPCLK1Freq>
 8001910:	e05a      	b.n	80019c8 <UART_SetConfig+0x160>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001912:	f7ff fa11 	bl	8000d38 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001916:	686b      	ldr	r3, [r5, #4]
 8001918:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800191c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001920:	b280      	uxth	r0, r0
 8001922:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001924:	2000      	movs	r0, #0
        break;
 8001926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001928:	4b66      	ldr	r3, [pc, #408]	; (8001ac4 <UART_SetConfig+0x25c>)
 800192a:	4a67      	ldr	r2, [pc, #412]	; (8001ac8 <UART_SetConfig+0x260>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001932:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001936:	5cd3      	ldrb	r3, [r2, r3]
 8001938:	f040 8093 	bne.w	8001a62 <UART_SetConfig+0x1fa>
    switch (clocksource)
 800193c:	2b08      	cmp	r3, #8
 800193e:	f200 808d 	bhi.w	8001a5c <UART_SetConfig+0x1f4>
 8001942:	a201      	add	r2, pc, #4	; (adr r2, 8001948 <UART_SetConfig+0xe0>)
 8001944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001948:	0800190d 	.word	0x0800190d
 800194c:	08001a21 	.word	0x08001a21
 8001950:	08001a4b 	.word	0x08001a4b
 8001954:	08001a5d 	.word	0x08001a5d
 8001958:	080019c5 	.word	0x080019c5
 800195c:	08001a5d 	.word	0x08001a5d
 8001960:	08001a5d 	.word	0x08001a5d
 8001964:	08001a5d 	.word	0x08001a5d
 8001968:	08001a2f 	.word	0x08001a2f
  UART_GETCLOCKSOURCE(huart, clocksource);
 800196c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197a:	d020      	beq.n	80019be <UART_SetConfig+0x156>
 800197c:	d9c1      	bls.n	8001902 <UART_SetConfig+0x9a>
 800197e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001982:	d00f      	beq.n	80019a4 <UART_SetConfig+0x13c>
 8001984:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001988:	d03b      	beq.n	8001a02 <UART_SetConfig+0x19a>
 800198a:	e799      	b.n	80018c0 <UART_SetConfig+0x58>
 800198c:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001996:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800199a:	d010      	beq.n	80019be <UART_SetConfig+0x156>
 800199c:	d9b1      	bls.n	8001902 <UART_SetConfig+0x9a>
 800199e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80019a2:	d140      	bne.n	8001a26 <UART_SetConfig+0x1be>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019a4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80019a8:	d041      	beq.n	8001a2e <UART_SetConfig+0x1c6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80019aa:	686a      	ldr	r2, [r5, #4]
 80019ac:	0853      	lsrs	r3, r2, #1
 80019ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80019b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	60e3      	str	r3, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80019ba:	2000      	movs	r0, #0
        break;
 80019bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019be:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80019c2:	d114      	bne.n	80019ee <UART_SetConfig+0x186>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80019c4:	f7ff f8c2 	bl	8000b4c <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80019c8:	686a      	ldr	r2, [r5, #4]
 80019ca:	682c      	ldr	r4, [r5, #0]
 80019cc:	0853      	lsrs	r3, r2, #1
 80019ce:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80019d2:	fbb0 f0f2 	udiv	r0, r0, r2
 80019d6:	f3c0 0342 	ubfx	r3, r0, #1, #3
 80019da:	f020 000f 	bic.w	r0, r0, #15
 80019de:	4303      	orrs	r3, r0
 80019e0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80019e2:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 80019e4:	60e3      	str	r3, [r4, #12]
 80019e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019e8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80019ec:	d0ea      	beq.n	80019c4 <UART_SetConfig+0x15c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80019ee:	f7ff f8ad 	bl	8000b4c <HAL_RCC_GetSysClockFreq>
 80019f2:	e790      	b.n	8001916 <UART_SetConfig+0xae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019f8:	d0d4      	beq.n	80019a4 <UART_SetConfig+0x13c>
 80019fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80019fe:	f47f af5f 	bne.w	80018c0 <UART_SetConfig+0x58>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a02:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001a06:	d020      	beq.n	8001a4a <UART_SetConfig+0x1e2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001a08:	686a      	ldr	r2, [r5, #4]
 8001a0a:	0853      	lsrs	r3, r2, #1
 8001a0c:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001a10:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8001a14:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	60e3      	str	r3, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a1c:	2000      	movs	r0, #0
        break;
 8001a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001a20:	f7ff f9a2 	bl	8000d68 <HAL_RCC_GetPCLK2Freq>
 8001a24:	e7d0      	b.n	80019c8 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a26:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001a2a:	d0ea      	beq.n	8001a02 <UART_SetConfig+0x19a>
 8001a2c:	e748      	b.n	80018c0 <UART_SetConfig+0x58>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001a2e:	686b      	ldr	r3, [r5, #4]
 8001a30:	085a      	lsrs	r2, r3, #1
 8001a32:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001a36:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a3a:	f3c2 0342 	ubfx	r3, r2, #1, #3
 8001a3e:	f022 020f 	bic.w	r2, r2, #15
 8001a42:	4313      	orrs	r3, r2
 8001a44:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a46:	2000      	movs	r0, #0
        break;
 8001a48:	e7cc      	b.n	80019e4 <UART_SetConfig+0x17c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001a4a:	686a      	ldr	r2, [r5, #4]
 8001a4c:	0853      	lsrs	r3, r2, #1
 8001a4e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001a52:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001a56:	fbb3 f2f2 	udiv	r2, r3, r2
 8001a5a:	e7ee      	b.n	8001a3a <UART_SetConfig+0x1d2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a5c:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 8001a5e:	2001      	movs	r0, #1
 8001a60:	e7c0      	b.n	80019e4 <UART_SetConfig+0x17c>
    switch (clocksource)
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	f63f af30 	bhi.w	80018c8 <UART_SetConfig+0x60>
 8001a68:	a201      	add	r2, pc, #4	; (adr r2, 8001a70 <UART_SetConfig+0x208>)
 8001a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6e:	bf00      	nop
 8001a70:	08001913 	.word	0x08001913
 8001a74:	08001a95 	.word	0x08001a95
 8001a78:	08001a09 	.word	0x08001a09
 8001a7c:	080018c9 	.word	0x080018c9
 8001a80:	080019ef 	.word	0x080019ef
 8001a84:	080018c9 	.word	0x080018c9
 8001a88:	080018c9 	.word	0x080018c9
 8001a8c:	080018c9 	.word	0x080018c9
 8001a90:	080019ab 	.word	0x080019ab
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001a94:	f7ff f968 	bl	8000d68 <HAL_RCC_GetPCLK2Freq>
 8001a98:	686b      	ldr	r3, [r5, #4]
 8001a9a:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <UART_SetConfig+0x248>)
 8001a9c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001aa0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001aa4:	b280      	uxth	r0, r0
 8001aa6:	60d0      	str	r0, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001aa8:	2000      	movs	r0, #0
        break;
 8001aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aac:	efff69f3 	.word	0xefff69f3
 8001ab0:	40013800 	.word	0x40013800
 8001ab4:	40004400 	.word	0x40004400
 8001ab8:	40004800 	.word	0x40004800
 8001abc:	40004c00 	.word	0x40004c00
 8001ac0:	40005000 	.word	0x40005000
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	080025e0 	.word	0x080025e0

08001acc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001acc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ace:	07da      	lsls	r2, r3, #31
{
 8001ad0:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ad2:	d506      	bpl.n	8001ae2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ad4:	6801      	ldr	r1, [r0, #0]
 8001ad6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001ad8:	684a      	ldr	r2, [r1, #4]
 8001ada:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001ade:	4322      	orrs	r2, r4
 8001ae0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ae2:	079c      	lsls	r4, r3, #30
 8001ae4:	d506      	bpl.n	8001af4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001ae6:	6801      	ldr	r1, [r0, #0]
 8001ae8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001aea:	684a      	ldr	r2, [r1, #4]
 8001aec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001af0:	4322      	orrs	r2, r4
 8001af2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001af4:	0759      	lsls	r1, r3, #29
 8001af6:	d506      	bpl.n	8001b06 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001af8:	6801      	ldr	r1, [r0, #0]
 8001afa:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001afc:	684a      	ldr	r2, [r1, #4]
 8001afe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b02:	4322      	orrs	r2, r4
 8001b04:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001b06:	071a      	lsls	r2, r3, #28
 8001b08:	d506      	bpl.n	8001b18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001b0a:	6801      	ldr	r1, [r0, #0]
 8001b0c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001b0e:	684a      	ldr	r2, [r1, #4]
 8001b10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b14:	4322      	orrs	r2, r4
 8001b16:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001b18:	06dc      	lsls	r4, r3, #27
 8001b1a:	d506      	bpl.n	8001b2a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001b1c:	6801      	ldr	r1, [r0, #0]
 8001b1e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001b20:	688a      	ldr	r2, [r1, #8]
 8001b22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b26:	4322      	orrs	r2, r4
 8001b28:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001b2a:	0699      	lsls	r1, r3, #26
 8001b2c:	d506      	bpl.n	8001b3c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001b2e:	6801      	ldr	r1, [r0, #0]
 8001b30:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001b32:	688a      	ldr	r2, [r1, #8]
 8001b34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b38:	4322      	orrs	r2, r4
 8001b3a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001b3c:	065a      	lsls	r2, r3, #25
 8001b3e:	d509      	bpl.n	8001b54 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001b40:	6801      	ldr	r1, [r0, #0]
 8001b42:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001b44:	684a      	ldr	r2, [r1, #4]
 8001b46:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001b4a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001b4c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001b50:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001b52:	d00b      	beq.n	8001b6c <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001b54:	061b      	lsls	r3, r3, #24
 8001b56:	d506      	bpl.n	8001b66 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001b58:	6802      	ldr	r2, [r0, #0]
 8001b5a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001b5c:	6853      	ldr	r3, [r2, #4]
 8001b5e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001b62:	430b      	orrs	r3, r1
 8001b64:	6053      	str	r3, [r2, #4]
  }
}
 8001b66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b6a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001b6c:	684a      	ldr	r2, [r1, #4]
 8001b6e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001b70:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001b74:	4322      	orrs	r2, r4
 8001b76:	604a      	str	r2, [r1, #4]
 8001b78:	e7ec      	b.n	8001b54 <UART_AdvFeatureConfig+0x88>
 8001b7a:	bf00      	nop

08001b7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b80:	9d08      	ldr	r5, [sp, #32]
 8001b82:	4680      	mov	r8, r0
 8001b84:	460f      	mov	r7, r1
 8001b86:	4616      	mov	r6, r2
 8001b88:	4699      	mov	r9, r3
 8001b8a:	f8d8 4000 	ldr.w	r4, [r8]
 8001b8e:	e001      	b.n	8001b94 <UART_WaitOnFlagUntilTimeout+0x18>
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001b90:	1c6b      	adds	r3, r5, #1
 8001b92:	d10a      	bne.n	8001baa <UART_WaitOnFlagUntilTimeout+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b94:	69e0      	ldr	r0, [r4, #28]
 8001b96:	ea37 0300 	bics.w	r3, r7, r0
 8001b9a:	bf0c      	ite	eq
 8001b9c:	2001      	moveq	r0, #1
 8001b9e:	2000      	movne	r0, #0
 8001ba0:	42b0      	cmp	r0, r6
 8001ba2:	d0f5      	beq.n	8001b90 <UART_WaitOnFlagUntilTimeout+0x14>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001ba4:	2000      	movs	r0, #0
}
 8001ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001baa:	b13d      	cbz	r5, 8001bbc <UART_WaitOnFlagUntilTimeout+0x40>
 8001bac:	f7fe fb54 	bl	8000258 <HAL_GetTick>
 8001bb0:	eba0 0009 	sub.w	r0, r0, r9
 8001bb4:	4285      	cmp	r5, r0
 8001bb6:	d2e8      	bcs.n	8001b8a <UART_WaitOnFlagUntilTimeout+0xe>
 8001bb8:	f8d8 4000 	ldr.w	r4, [r8]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bbc:	6823      	ldr	r3, [r4, #0]
 8001bbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001bc2:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bc4:	68a3      	ldr	r3, [r4, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001bc6:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bc8:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8001bcc:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bce:	60a3      	str	r3, [r4, #8]
        __HAL_UNLOCK(huart);
 8001bd0:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8001bd2:	f888 2069 	strb.w	r2, [r8, #105]	; 0x69
        __HAL_UNLOCK(huart);
 8001bd6:	f888 1068 	strb.w	r1, [r8, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8001bda:	f888 206a 	strb.w	r2, [r8, #106]	; 0x6a
 8001bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001be2:	bf00      	nop

08001be4 <UART_CheckIdleState>:
{
 8001be4:	b570      	push	{r4, r5, r6, lr}
 8001be6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001be8:	2500      	movs	r5, #0
{
 8001bea:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bec:	66c5      	str	r5, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001bee:	f7fe fb33 	bl	8000258 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001bf2:	6823      	ldr	r3, [r4, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8001bf8:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001bfa:	d40c      	bmi.n	8001c16 <UART_CheckIdleState+0x32>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	075b      	lsls	r3, r3, #29
 8001c00:	d417      	bmi.n	8001c32 <UART_CheckIdleState+0x4e>
  huart->gState  = HAL_UART_STATE_READY;
 8001c02:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001c04:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001c06:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001c0a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001c0e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 8001c12:	b002      	add	sp, #8
 8001c14:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001c16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	462a      	mov	r2, r5
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001c24:	4620      	mov	r0, r4
 8001c26:	f7ff ffa9 	bl	8001b7c <UART_WaitOnFlagUntilTimeout>
 8001c2a:	b180      	cbz	r0, 8001c4e <UART_CheckIdleState+0x6a>
      return HAL_TIMEOUT;
 8001c2c:	2003      	movs	r0, #3
}
 8001c2e:	b002      	add	sp, #8
 8001c30:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001c32:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8001c36:	9200      	str	r2, [sp, #0]
 8001c38:	4633      	mov	r3, r6
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001c40:	4620      	mov	r0, r4
 8001c42:	f7ff ff9b 	bl	8001b7c <UART_WaitOnFlagUntilTimeout>
 8001c46:	2800      	cmp	r0, #0
 8001c48:	d0db      	beq.n	8001c02 <UART_CheckIdleState+0x1e>
      return HAL_TIMEOUT;
 8001c4a:	2003      	movs	r0, #3
 8001c4c:	e7ef      	b.n	8001c2e <UART_CheckIdleState+0x4a>
 8001c4e:	6823      	ldr	r3, [r4, #0]
 8001c50:	e7d4      	b.n	8001bfc <UART_CheckIdleState+0x18>
 8001c52:	bf00      	nop

08001c54 <HAL_UART_Init>:
  if(huart == NULL)
 8001c54:	b390      	cbz	r0, 8001cbc <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001c56:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 8001c5a:	b510      	push	{r4, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001c5c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c60:	4604      	mov	r4, r0
 8001c62:	b303      	cbz	r3, 8001ca6 <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 8001c64:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001c66:	2324      	movs	r3, #36	; 0x24
 8001c68:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001c6c:	6813      	ldr	r3, [r2, #0]
 8001c6e:	f023 0301 	bic.w	r3, r3, #1
 8001c72:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c74:	4620      	mov	r0, r4
 8001c76:	f7ff fdf7 	bl	8001868 <UART_SetConfig>
 8001c7a:	2801      	cmp	r0, #1
 8001c7c:	d018      	beq.n	8001cb0 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c80:	b9c3      	cbnz	r3, 8001cb4 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c82:	6823      	ldr	r3, [r4, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c92:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001c9a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001c9c:	601a      	str	r2, [r3, #0]
}
 8001c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001ca2:	f7ff bf9f 	b.w	8001be4 <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 8001ca6:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001caa:	f000 fb9f 	bl	80023ec <HAL_UART_MspInit>
 8001cae:	e7d9      	b.n	8001c64 <HAL_UART_Init+0x10>
}
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f7ff ff09 	bl	8001acc <UART_AdvFeatureConfig>
 8001cba:	e7e2      	b.n	8001c82 <HAL_UART_Init+0x2e>
}
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	4770      	bx	lr

08001cc0 <getTimerCore>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t getTimerCore(GPIO_TypeDef * port, uint16_t pin) {
 8001cc0:	b570      	push	{r4, r5, r6, lr}
	uint16_t timer = 0;
	HAL_GPIO_WritePin(SS_trig_GPIO_Port, SS_trig_Pin, GPIO_PIN_SET);
 8001cc2:	2201      	movs	r2, #1
uint16_t getTimerCore(GPIO_TypeDef * port, uint16_t pin) {
 8001cc4:	4605      	mov	r5, r0
 8001cc6:	460e      	mov	r6, r1
	HAL_GPIO_WritePin(SS_trig_GPIO_Port, SS_trig_Pin, GPIO_PIN_SET);
 8001cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ccc:	2102      	movs	r1, #2
 8001cce:	f7fe fc57 	bl	8000580 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001cd2:	200a      	movs	r0, #10
 8001cd4:	f7fe fac6 	bl	8000264 <HAL_Delay>
	HAL_GPIO_WritePin(SS_trig_GPIO_Port, SS_trig_Pin, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2102      	movs	r1, #2
 8001cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce0:	f7fe fc4e 	bl	8000580 <HAL_GPIO_WritePin>
	while (!HAL_GPIO_ReadPin(port, pin))
 8001ce4:	4631      	mov	r1, r6
 8001ce6:	4628      	mov	r0, r5
 8001ce8:	f7fe fc44 	bl	8000574 <HAL_GPIO_ReadPin>
 8001cec:	2800      	cmp	r0, #0
 8001cee:	d0f9      	beq.n	8001ce4 <getTimerCore+0x24>
 8001cf0:	2400      	movs	r4, #0
		;
	while (HAL_GPIO_ReadPin(port, pin)) {
 8001cf2:	4631      	mov	r1, r6
 8001cf4:	4628      	mov	r0, r5
 8001cf6:	f7fe fc3d 	bl	8000574 <HAL_GPIO_ReadPin>
 8001cfa:	b2a3      	uxth	r3, r4
 8001cfc:	3401      	adds	r4, #1
 8001cfe:	2800      	cmp	r0, #0
 8001d00:	d1f7      	bne.n	8001cf2 <getTimerCore+0x32>
		timer++;
	}
	return timer;
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	bd70      	pop	{r4, r5, r6, pc}
 8001d06:	bf00      	nop

08001d08 <getTimer>:
uint16_t getTimer(char ch) {
	switch (ch) {
 8001d08:	284d      	cmp	r0, #77	; 0x4d
 8001d0a:	d00d      	beq.n	8001d28 <getTimer+0x20>
 8001d0c:	2852      	cmp	r0, #82	; 0x52
 8001d0e:	d007      	beq.n	8001d20 <getTimer+0x18>
 8001d10:	284c      	cmp	r0, #76	; 0x4c
 8001d12:	d001      	beq.n	8001d18 <getTimer+0x10>
	case 'R':
		return getTimerCore(SS_echo_right_GPIO_Port, SS_echo_right_Pin);
	default:
		return 0;
	}
}
 8001d14:	2000      	movs	r0, #0
 8001d16:	4770      	bx	lr
		return getTimerCore(SS_echo_left_GPIO_Port, SS_echo_left_Pin);
 8001d18:	2101      	movs	r1, #1
 8001d1a:	4806      	ldr	r0, [pc, #24]	; (8001d34 <getTimer+0x2c>)
 8001d1c:	f7ff bfd0 	b.w	8001cc0 <getTimerCore>
		return getTimerCore(SS_echo_right_GPIO_Port, SS_echo_right_Pin);
 8001d20:	2102      	movs	r1, #2
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <getTimer+0x30>)
 8001d24:	f7ff bfcc 	b.w	8001cc0 <getTimerCore>
		return getTimerCore(SS_echo_middle_GPIO_Port, SS_echo_middle_Pin);
 8001d28:	2110      	movs	r1, #16
 8001d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2e:	f7ff bfc7 	b.w	8001cc0 <getTimerCore>
 8001d32:	bf00      	nop
 8001d34:	48000400 	.word	0x48000400
 8001d38:	48000800 	.word	0x48000800

08001d3c <setMotor>:
void setMotor(char ch, int spd) {
 8001d3c:	b510      	push	{r4, lr}
 8001d3e:	f06f 0463 	mvn.w	r4, #99	; 0x63
 8001d42:	428c      	cmp	r4, r1
 8001d44:	bfb8      	it	lt
 8001d46:	460c      	movlt	r4, r1
 8001d48:	2c64      	cmp	r4, #100	; 0x64
 8001d4a:	bfa8      	it	ge
 8001d4c:	2464      	movge	r4, #100	; 0x64
	if (spd > pwmStep)
		spd = pwmStep;
	if (spd < -pwmStep)
		spd = -pwmStep;
	switch (ch) {
 8001d4e:	284c      	cmp	r0, #76	; 0x4c
 8001d50:	d01b      	beq.n	8001d8a <setMotor+0x4e>
 8001d52:	2852      	cmp	r0, #82	; 0x52
 8001d54:	d118      	bne.n	8001d88 <setMotor+0x4c>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,
				((spd + pwmStep) % (pwmStep + 1)));
		regL = spd;
		break;
	case 'R':
		HAL_GPIO_WritePin(BIN_2_GPIO_Port, BIN_2_Pin, (spd <= 0));
 8001d56:	2c00      	cmp	r4, #0
 8001d58:	bfcc      	ite	gt
 8001d5a:	2200      	movgt	r2, #0
 8001d5c:	2201      	movle	r2, #1
 8001d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d62:	4816      	ldr	r0, [pc, #88]	; (8001dbc <setMotor+0x80>)
 8001d64:	f7fe fc0c 	bl	8000580 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,
				((spd + pwmStep) % (pwmStep + 1)));
		regR = spd;
 8001d68:	4a15      	ldr	r2, [pc, #84]	; (8001dc0 <setMotor+0x84>)
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,
 8001d6a:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <setMotor+0x88>)
		regR = spd;
 8001d6c:	6014      	str	r4, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,
 8001d6e:	4916      	ldr	r1, [pc, #88]	; (8001dc8 <setMotor+0x8c>)
 8001d70:	3464      	adds	r4, #100	; 0x64
 8001d72:	fb83 3204 	smull	r3, r2, r3, r4
 8001d76:	17e3      	asrs	r3, r4, #31
 8001d78:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 8001d7c:	6809      	ldr	r1, [r1, #0]
 8001d7e:	2265      	movs	r2, #101	; 0x65
 8001d80:	fb02 4313 	mls	r3, r2, r3, r4
 8001d84:	640b      	str	r3, [r1, #64]	; 0x40
 8001d86:	bd10      	pop	{r4, pc}
 8001d88:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(AIN_2_GPIO_Port, AIN_2_Pin, (spd <= 0));
 8001d8a:	2c00      	cmp	r4, #0
 8001d8c:	bfcc      	ite	gt
 8001d8e:	2200      	movgt	r2, #0
 8001d90:	2201      	movle	r2, #1
 8001d92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d96:	480d      	ldr	r0, [pc, #52]	; (8001dcc <setMotor+0x90>)
 8001d98:	f7fe fbf2 	bl	8000580 <HAL_GPIO_WritePin>
		regL = spd;
 8001d9c:	4a0c      	ldr	r2, [pc, #48]	; (8001dd0 <setMotor+0x94>)
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <setMotor+0x88>)
		regL = spd;
 8001da0:	6014      	str	r4, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,
 8001da2:	490c      	ldr	r1, [pc, #48]	; (8001dd4 <setMotor+0x98>)
 8001da4:	3464      	adds	r4, #100	; 0x64
 8001da6:	fb83 3204 	smull	r3, r2, r3, r4
 8001daa:	17e3      	asrs	r3, r4, #31
 8001dac:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 8001db0:	6809      	ldr	r1, [r1, #0]
 8001db2:	2265      	movs	r2, #101	; 0x65
 8001db4:	fb02 4313 	mls	r3, r2, r3, r4
 8001db8:	63cb      	str	r3, [r1, #60]	; 0x3c
		break;
 8001dba:	bd10      	pop	{r4, pc}
 8001dbc:	48000400 	.word	0x48000400
 8001dc0:	20000038 	.word	0x20000038
 8001dc4:	288df0cb 	.word	0x288df0cb
 8001dc8:	2000004c 	.word	0x2000004c
 8001dcc:	48000800 	.word	0x48000800
 8001dd0:	20000034 	.word	0x20000034
 8001dd4:	2000008c 	.word	0x2000008c

08001dd8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001dd8:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001dda:	2100      	movs	r1, #0
void SystemClock_Config(void) {
 8001ddc:	b0a7      	sub	sp, #156	; 0x9c
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001dde:	460c      	mov	r4, r1
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001de0:	a806      	add	r0, sp, #24
 8001de2:	2228      	movs	r2, #40	; 0x28
 8001de4:	f000 fbd8 	bl	8002598 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001de8:	4621      	mov	r1, r4
 8001dea:	a810      	add	r0, sp, #64	; 0x40
 8001dec:	2258      	movs	r2, #88	; 0x58
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001dee:	9402      	str	r4, [sp, #8]
 8001df0:	9401      	str	r4, [sp, #4]
 8001df2:	9403      	str	r4, [sp, #12]
 8001df4:	9404      	str	r4, [sp, #16]
 8001df6:	9405      	str	r4, [sp, #20]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001df8:	f000 fbce 	bl	8002598 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dfc:	2301      	movs	r3, #1
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dfe:	2502      	movs	r5, #2
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e00:	2110      	movs	r1, #16
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e02:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e06:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001e08:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e0a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e0e:	910a      	str	r1, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e10:	920d      	str	r2, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e12:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e14:	9506      	str	r5, [sp, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e16:	950c      	str	r5, [sp, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001e18:	f7fe fbc8 	bl	80005ac <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001e1c:	220f      	movs	r2, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001e1e:	4629      	mov	r1, r5
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001e24:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001e26:	9201      	str	r2, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e28:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e2a:	9502      	str	r5, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e2c:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e2e:	9405      	str	r4, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001e30:	f7fe feba 	bl	8000ba8 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <SystemClock_Config+0x70>)
			| RCC_PERIPHCLK_TIM34;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e36:	9413      	str	r4, [sp, #76]	; 0x4c
	PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001e38:	a810      	add	r0, sp, #64	; 0x40
	PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001e3a:	941f      	str	r4, [sp, #124]	; 0x7c
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8001e3c:	9310      	str	r3, [sp, #64]	; 0x40
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001e3e:	f7fe ffab 	bl	8000d98 <HAL_RCCEx_PeriphCLKConfig>
		Error_Handler();
	}
}
 8001e42:	b027      	add	sp, #156	; 0x9c
 8001e44:	bd30      	pop	{r4, r5, pc}
 8001e46:	bf00      	nop
 8001e48:	00200002 	.word	0x00200002

08001e4c <main>:
int main(void) {
 8001e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e50:	b095      	sub	sp, #84	; 0x54
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001e52:	2400      	movs	r4, #0
	HAL_Init();
 8001e54:	f7fe f9e2 	bl	800021c <HAL_Init>
	SystemClock_Config();
 8001e58:	f7ff ffbe 	bl	8001dd8 <SystemClock_Config>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8001e5c:	4bb5      	ldr	r3, [pc, #724]	; (8002134 <main+0x2e8>)
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001e5e:	940e      	str	r4, [sp, #56]	; 0x38
 8001e60:	940d      	str	r4, [sp, #52]	; 0x34
 8001e62:	940f      	str	r4, [sp, #60]	; 0x3c
 8001e64:	9410      	str	r4, [sp, #64]	; 0x40
 8001e66:	9411      	str	r4, [sp, #68]	; 0x44
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8001e68:	695a      	ldr	r2, [r3, #20]
	htim3.Instance = TIM3;
 8001e6a:	4eb3      	ldr	r6, [pc, #716]	; (8002138 <main+0x2ec>)
	htim4.Instance = TIM4;
 8001e6c:	4db3      	ldr	r5, [pc, #716]	; (800213c <main+0x2f0>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8001e6e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001e72:	615a      	str	r2, [r3, #20]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001e7a:	9203      	str	r2, [sp, #12]
 8001e7c:	9a03      	ldr	r2, [sp, #12]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e84:	615a      	str	r2, [r3, #20]
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001e8c:	9204      	str	r2, [sp, #16]
 8001e8e:	9a04      	ldr	r2, [sp, #16]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e96:	615a      	str	r2, [r3, #20]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SS_trig_Pin | LED_Pin, GPIO_PIN_RESET);
 8001e9e:	4622      	mov	r2, r4
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8001ea0:	9305      	str	r3, [sp, #20]
	HAL_GPIO_WritePin(GPIOA, SS_trig_Pin | LED_Pin, GPIO_PIN_RESET);
 8001ea2:	2122      	movs	r1, #34	; 0x22
 8001ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8001ea8:	9b05      	ldr	r3, [sp, #20]
	HAL_GPIO_WritePin(GPIOA, SS_trig_Pin | LED_Pin, GPIO_PIN_RESET);
 8001eaa:	f7fe fb69 	bl	8000580 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, EN_Pin | AIN_2_Pin, GPIO_PIN_RESET);
 8001eae:	4622      	mov	r2, r4
 8001eb0:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001eb4:	48a2      	ldr	r0, [pc, #648]	; (8002140 <main+0x2f4>)
 8001eb6:	f7fe fb63 	bl	8000580 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BIN_2_GPIO_Port, BIN_2_Pin, GPIO_PIN_RESET);
 8001eba:	4622      	mov	r2, r4
 8001ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ec0:	48a0      	ldr	r0, [pc, #640]	; (8002144 <main+0x2f8>)
 8001ec2:	f7fe fb5d 	bl	8000580 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : B1_Pin FLAUT_Pin */
	GPIO_InitStruct.Pin = B1_Pin | FLAUT_Pin;
 8001ec6:	f44f 5201 	mov.w	r2, #8256	; 0x2040
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eca:	4b9f      	ldr	r3, [pc, #636]	; (8002148 <main+0x2fc>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ecc:	489c      	ldr	r0, [pc, #624]	; (8002140 <main+0x2f4>)
	GPIO_InitStruct.Pin = B1_Pin | FLAUT_Pin;
 8001ece:	920d      	str	r2, [sp, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed0:	a90d      	add	r1, sp, #52	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ed4:	930e      	str	r3, [sp, #56]	; 0x38
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed6:	f7fe fa45 	bl	8000364 <HAL_GPIO_Init>

	/*Configure GPIO pin : SS_echo_right_Pin */
	GPIO_InitStruct.Pin = SS_echo_right_Pin;
 8001eda:	2302      	movs	r3, #2
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(SS_echo_right_GPIO_Port, &GPIO_InitStruct);
 8001edc:	a90d      	add	r1, sp, #52	; 0x34
 8001ede:	4898      	ldr	r0, [pc, #608]	; (8002140 <main+0x2f4>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee0:	940e      	str	r4, [sp, #56]	; 0x38

	/*Configure GPIO pins : SS_trig_Pin LED_Pin */
	GPIO_InitStruct.Pin = SS_trig_Pin | LED_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee2:	2701      	movs	r7, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = SS_echo_right_Pin;
 8001ee6:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init(SS_echo_right_GPIO_Port, &GPIO_InitStruct);
 8001ee8:	f7fe fa3c 	bl	8000364 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SS_trig_Pin | LED_Pin;
 8001eec:	2322      	movs	r3, #34	; 0x22
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eee:	a90d      	add	r1, sp, #52	; 0x34
 8001ef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef6:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Pin = SS_trig_Pin | LED_Pin;
 8001ef8:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efa:	970e      	str	r7, [sp, #56]	; 0x38
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efc:	f7fe fa32 	bl	8000364 <HAL_GPIO_Init>

	/*Configure GPIO pin : SS_echo_middle_Pin */
	GPIO_InitStruct.Pin = SS_echo_middle_Pin;
 8001f00:	2310      	movs	r3, #16
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(SS_echo_middle_GPIO_Port, &GPIO_InitStruct);
 8001f02:	a90d      	add	r1, sp, #52	; 0x34
 8001f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f08:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = SS_echo_middle_Pin;
 8001f0c:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init(SS_echo_middle_GPIO_Port, &GPIO_InitStruct);
 8001f0e:	f7fe fa29 	bl	8000364 <HAL_GPIO_Init>

	/*Configure GPIO pins : EN_Pin AIN_2_Pin */
	GPIO_InitStruct.Pin = EN_Pin | AIN_2_Pin;
 8001f12:	f44f 7308 	mov.w	r3, #544	; 0x220
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f16:	a90d      	add	r1, sp, #52	; 0x34
 8001f18:	4889      	ldr	r0, [pc, #548]	; (8002140 <main+0x2f4>)
	GPIO_InitStruct.Pin = EN_Pin | AIN_2_Pin;
 8001f1a:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1c:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f22:	f7fe fa1f 	bl	8000364 <HAL_GPIO_Init>

	/*Configure GPIO pin : SS_echo_left_Pin */
	GPIO_InitStruct.Pin = SS_echo_left_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(SS_echo_left_GPIO_Port, &GPIO_InitStruct);
 8001f26:	a90d      	add	r1, sp, #52	; 0x34
 8001f28:	4886      	ldr	r0, [pc, #536]	; (8002144 <main+0x2f8>)
	GPIO_InitStruct.Pin = SS_echo_left_Pin;
 8001f2a:	970d      	str	r7, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f2c:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(SS_echo_left_GPIO_Port, &GPIO_InitStruct);
 8001f30:	f7fe fa18 	bl	8000364 <HAL_GPIO_Init>

	/*Configure GPIO pin : BIN_2_Pin */
	GPIO_InitStruct.Pin = BIN_2_Pin;
 8001f34:	f44f 7380 	mov.w	r3, #256	; 0x100
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(BIN_2_GPIO_Port, &GPIO_InitStruct);
 8001f38:	a90d      	add	r1, sp, #52	; 0x34
 8001f3a:	4882      	ldr	r0, [pc, #520]	; (8002144 <main+0x2f8>)
	GPIO_InitStruct.Pin = BIN_2_Pin;
 8001f3c:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3e:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(BIN_2_GPIO_Port, &GPIO_InitStruct);
 8001f44:	f7fe fa0e 	bl	8000364 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f48:	4622      	mov	r2, r4
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	2017      	movs	r0, #23
 8001f4e:	f7fe f9ad 	bl	80002ac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f52:	2017      	movs	r0, #23
 8001f54:	f7fe f9e0 	bl	8000318 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001f58:	4622      	mov	r2, r4
 8001f5a:	2103      	movs	r1, #3
 8001f5c:	2028      	movs	r0, #40	; 0x28
 8001f5e:	f7fe f9a5 	bl	80002ac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f62:	2028      	movs	r0, #40	; 0x28
 8001f64:	f7fe f9d8 	bl	8000318 <HAL_NVIC_EnableIRQ>
	huart2.Instance = USART2;
 8001f68:	4b78      	ldr	r3, [pc, #480]	; (800214c <main+0x300>)
 8001f6a:	4979      	ldr	r1, [pc, #484]	; (8002150 <main+0x304>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6c:	609c      	str	r4, [r3, #8]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001f6e:	f04f 080c 	mov.w	r8, #12
	huart2.Init.BaudRate = 115200;
 8001f72:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001f76:	4618      	mov	r0, r3
	huart2.Init.BaudRate = 115200;
 8001f78:	e883 0006 	stmia.w	r3, {r1, r2}
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001f7c:	60dc      	str	r4, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001f7e:	611c      	str	r4, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f80:	619c      	str	r4, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f82:	61dc      	str	r4, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f84:	621c      	str	r4, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f86:	625c      	str	r4, [r3, #36]	; 0x24
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001f88:	f8c3 8014 	str.w	r8, [r3, #20]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001f8c:	f7ff fe62 	bl	8001c54 <HAL_UART_Init>
	htim3.Instance = TIM3;
 8001f90:	4a70      	ldr	r2, [pc, #448]	; (8002154 <main+0x308>)
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f92:	60b4      	str	r4, [r6, #8]
	htim3.Init.Period = pwmStep - 1;
 8001f94:	2363      	movs	r3, #99	; 0x63
	htim3.Init.Prescaler = 17999;
 8001f96:	f244 6b4f 	movw	fp, #17999	; 0x464f
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001f9a:	4630      	mov	r0, r6
	htim3.Init.Period = pwmStep - 1;
 8001f9c:	60f3      	str	r3, [r6, #12]
	htim3.Init.Prescaler = 17999;
 8001f9e:	e886 0804 	stmia.w	r6, {r2, fp}
	htim3.Init.Period = pwmStep - 1;
 8001fa2:	9301      	str	r3, [sp, #4]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa4:	6134      	str	r4, [r6, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa6:	61b4      	str	r4, [r6, #24]
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa8:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001fac:	9409      	str	r4, [sp, #36]	; 0x24
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001fae:	9406      	str	r4, [sp, #24]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001fb0:	940d      	str	r4, [sp, #52]	; 0x34
 8001fb2:	940e      	str	r4, [sp, #56]	; 0x38
 8001fb4:	940f      	str	r4, [sp, #60]	; 0x3c
 8001fb6:	9410      	str	r4, [sp, #64]	; 0x40
 8001fb8:	9411      	str	r4, [sp, #68]	; 0x44
 8001fba:	9412      	str	r4, [sp, #72]	; 0x48
 8001fbc:	9413      	str	r4, [sp, #76]	; 0x4c
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001fbe:	940a      	str	r4, [sp, #40]	; 0x28
 8001fc0:	940b      	str	r4, [sp, #44]	; 0x2c
 8001fc2:	940c      	str	r4, [sp, #48]	; 0x30
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001fc4:	9407      	str	r4, [sp, #28]
 8001fc6:	9408      	str	r4, [sp, #32]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001fc8:	f7ff f9c6 	bl	8001358 <HAL_TIM_Base_Init>
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001fcc:	a909      	add	r1, sp, #36	; 0x24
 8001fce:	4630      	mov	r0, r6
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001fd4:	f7ff f864 	bl	80010a0 <HAL_TIM_ConfigClockSource>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001fd8:	4630      	mov	r0, r6
 8001fda:	f7ff f9d9 	bl	8001390 <HAL_TIM_PWM_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001fde:	a906      	add	r1, sp, #24
 8001fe0:	4630      	mov	r0, r6
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe2:	f04f 0960 	mov.w	r9, #96	; 0x60
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe6:	9406      	str	r4, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe8:	9408      	str	r4, [sp, #32]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001fea:	f7ff fc0f 	bl	800180c <HAL_TIMEx_MasterConfigSynchronization>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8001fee:	a90d      	add	r1, sp, #52	; 0x34
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	4630      	mov	r0, r6
	sConfigOC.Pulse = 0;
 8001ff4:	940e      	str	r4, [sp, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ff6:	940f      	str	r4, [sp, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff8:	9411      	str	r4, [sp, #68]	; 0x44
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ffa:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8001ffe:	f7ff fb71 	bl	80016e4 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim3);
 8002002:	4630      	mov	r0, r6
 8002004:	f000 f9aa 	bl	800235c <HAL_TIM_MspPostInit>
	htim4.Init.Period = pwmStep - 1;
 8002008:	9b01      	ldr	r3, [sp, #4]
	htim4.Instance = TIM4;
 800200a:	4a53      	ldr	r2, [pc, #332]	; (8002158 <main+0x30c>)
	htim4.Init.Period = pwmStep - 1;
 800200c:	60eb      	str	r3, [r5, #12]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 800200e:	4628      	mov	r0, r5
	htim4.Instance = TIM4;
 8002010:	602a      	str	r2, [r5, #0]
	htim4.Init.Prescaler = 17999;
 8002012:	f8c5 b004 	str.w	fp, [r5, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002016:	60ac      	str	r4, [r5, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002018:	612c      	str	r4, [r5, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800201a:	61ac      	str	r4, [r5, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800201c:	9409      	str	r4, [sp, #36]	; 0x24
 800201e:	940a      	str	r4, [sp, #40]	; 0x28
 8002020:	940b      	str	r4, [sp, #44]	; 0x2c
 8002022:	940c      	str	r4, [sp, #48]	; 0x30
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002024:	9406      	str	r4, [sp, #24]
 8002026:	9407      	str	r4, [sp, #28]
 8002028:	9408      	str	r4, [sp, #32]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800202a:	940d      	str	r4, [sp, #52]	; 0x34
 800202c:	940e      	str	r4, [sp, #56]	; 0x38
 800202e:	940f      	str	r4, [sp, #60]	; 0x3c
 8002030:	9410      	str	r4, [sp, #64]	; 0x40
 8002032:	9411      	str	r4, [sp, #68]	; 0x44
 8002034:	9412      	str	r4, [sp, #72]	; 0x48
 8002036:	9413      	str	r4, [sp, #76]	; 0x4c
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8002038:	f7ff f98e 	bl	8001358 <HAL_TIM_Base_Init>
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 800203c:	a909      	add	r1, sp, #36	; 0x24
 800203e:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002040:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8002044:	f7ff f82c 	bl	80010a0 <HAL_TIM_ConfigClockSource>
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8002048:	4628      	mov	r0, r5
 800204a:	f7ff f9a1 	bl	8001390 <HAL_TIM_PWM_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800204e:	a906      	add	r1, sp, #24
 8002050:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002052:	9406      	str	r4, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002054:	9408      	str	r4, [sp, #32]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8002056:	f7ff fbd9 	bl	800180c <HAL_TIMEx_MasterConfigSynchronization>
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 800205a:	4642      	mov	r2, r8
 800205c:	a90d      	add	r1, sp, #52	; 0x34
 800205e:	4628      	mov	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002060:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
	sConfigOC.Pulse = 0;
 8002064:	940e      	str	r4, [sp, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002066:	940f      	str	r4, [sp, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002068:	9411      	str	r4, [sp, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 800206a:	f7ff fb3b 	bl	80016e4 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim4);
 800206e:	4628      	mov	r0, r5
 8002070:	f000 f974 	bl	800235c <HAL_TIM_MspPostInit>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002074:	4630      	mov	r0, r6
 8002076:	2108      	movs	r1, #8
 8002078:	f7fe ffe0 	bl	800103c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800207c:	4641      	mov	r1, r8
 800207e:	4628      	mov	r0, r5
 8002080:	f7fe ffdc 	bl	800103c <HAL_TIM_PWM_Start>
	timerM = getTimer(M);
 8002084:	204d      	movs	r0, #77	; 0x4d
 8002086:	f7ff fe3f 	bl	8001d08 <getTimer>
 800208a:	4e34      	ldr	r6, [pc, #208]	; (800215c <main+0x310>)
	timerL = getTimer(L);
 800208c:	4d34      	ldr	r5, [pc, #208]	; (8002160 <main+0x314>)
	timerM = getTimer(M);
 800208e:	6030      	str	r0, [r6, #0]
		return getTimerCore(SS_echo_left_GPIO_Port, SS_echo_left_Pin);
 8002090:	482c      	ldr	r0, [pc, #176]	; (8002144 <main+0x2f8>)
 8002092:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 800216c <main+0x320>
 8002096:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8002170 <main+0x324>
 800209a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8002174 <main+0x328>
						setMotor(L, 45+(4000-getTimer(M))/200);
 800209e:	4c31      	ldr	r4, [pc, #196]	; (8002164 <main+0x318>)
		return getTimerCore(SS_echo_left_GPIO_Port, SS_echo_left_Pin);
 80020a0:	4639      	mov	r1, r7
 80020a2:	4682      	mov	sl, r0
 80020a4:	f7ff fe0c 	bl	8001cc0 <getTimerCore>
	timerL = getTimer(L);
 80020a8:	6028      	str	r0, [r5, #0]
	timerR = getTimer(R);
 80020aa:	2052      	movs	r0, #82	; 0x52
 80020ac:	f7ff fe2c 	bl	8001d08 <getTimer>
 80020b0:	4f2d      	ldr	r7, [pc, #180]	; (8002168 <main+0x31c>)
	setMotor(L, 80);
 80020b2:	2150      	movs	r1, #80	; 0x50
	timerR = getTimer(R);
 80020b4:	6038      	str	r0, [r7, #0]
	setMotor(L, 80);
 80020b6:	204c      	movs	r0, #76	; 0x4c
 80020b8:	f7ff fe40 	bl	8001d3c <setMotor>
	setMotor(R, 80);
 80020bc:	2150      	movs	r1, #80	; 0x50
 80020be:	2052      	movs	r0, #82	; 0x52
 80020c0:	f7ff fe3c 	bl	8001d3c <setMotor>
		head: deltaM = getTimer(M) - timerM;
 80020c4:	204d      	movs	r0, #77	; 0x4d
 80020c6:	f7ff fe1f 	bl	8001d08 <getTimer>
 80020ca:	6833      	ldr	r3, [r6, #0]
				timerM += deltaM;
 80020cc:	6030      	str	r0, [r6, #0]
		head: deltaM = getTimer(M) - timerM;
 80020ce:	1ac3      	subs	r3, r0, r3
		return getTimerCore(SS_echo_left_GPIO_Port, SS_echo_left_Pin);
 80020d0:	2101      	movs	r1, #1
 80020d2:	4650      	mov	r0, sl
		head: deltaM = getTimer(M) - timerM;
 80020d4:	f8cb 3000 	str.w	r3, [fp]
		return getTimerCore(SS_echo_left_GPIO_Port, SS_echo_left_Pin);
 80020d8:	f7ff fdf2 	bl	8001cc0 <getTimerCore>
				deltaL = getTimer(L) - timerL;
 80020dc:	682b      	ldr	r3, [r5, #0]
				timerL += deltaL;
 80020de:	6028      	str	r0, [r5, #0]
				deltaL = getTimer(L) - timerL;
 80020e0:	1ac3      	subs	r3, r0, r3
				deltaR = getTimer(R) - timerR;
 80020e2:	2052      	movs	r0, #82	; 0x52
				deltaL = getTimer(L) - timerL;
 80020e4:	f8c8 3000 	str.w	r3, [r8]
				deltaR = getTimer(R) - timerR;
 80020e8:	f7ff fe0e 	bl	8001d08 <getTimer>
 80020ec:	683b      	ldr	r3, [r7, #0]
				if (timerM >= 4500) {
 80020ee:	6832      	ldr	r2, [r6, #0]
				timerR += deltaR;
 80020f0:	6038      	str	r0, [r7, #0]
				deltaR = getTimer(R) - timerR;
 80020f2:	1ac0      	subs	r0, r0, r3
				if (timerM >= 4500) {
 80020f4:	f241 1393 	movw	r3, #4499	; 0x1193
 80020f8:	429a      	cmp	r2, r3
				deltaR = getTimer(R) - timerR;
 80020fa:	f8c9 0000 	str.w	r0, [r9]
				if (timerM >= 4500) {
 80020fe:	d94e      	bls.n	800219e <main+0x352>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002100:	2200      	movs	r2, #0
 8002102:	2120      	movs	r1, #32
 8002104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002108:	f7fe fa3a 	bl	8000580 <HAL_GPIO_WritePin>
					if (timerL < 3000) {
 800210c:	682a      	ldr	r2, [r5, #0]
 800210e:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8002112:	429a      	cmp	r2, r3
 8002114:	f200 80a6 	bhi.w	8002264 <main+0x418>
						if (deltaL < -20 && deltaL > -4000) {
 8002118:	f8d8 3000 	ldr.w	r3, [r8]
 800211c:	f640 728a 	movw	r2, #3978	; 0xf8a
 8002120:	f603 719f 	addw	r1, r3, #3999	; 0xf9f
 8002124:	4291      	cmp	r1, r2
 8002126:	f240 80ac 	bls.w	8002282 <main+0x436>
						} else if (deltaL > 20 && deltaL < 4000) {
 800212a:	3b15      	subs	r3, #21
 800212c:	4293      	cmp	r3, r2
 800212e:	f200 80b5 	bhi.w	800229c <main+0x450>
 8002132:	e021      	b.n	8002178 <main+0x32c>
 8002134:	40021000 	.word	0x40021000
 8002138:	2000008c 	.word	0x2000008c
 800213c:	2000004c 	.word	0x2000004c
 8002140:	48000800 	.word	0x48000800
 8002144:	48000400 	.word	0x48000400
 8002148:	10110000 	.word	0x10110000
 800214c:	200000cc 	.word	0x200000cc
 8002150:	40004400 	.word	0x40004400
 8002154:	40000400 	.word	0x40000400
 8002158:	40000800 	.word	0x40000800
 800215c:	20000040 	.word	0x20000040
 8002160:	2000003c 	.word	0x2000003c
 8002164:	51eb851f 	.word	0x51eb851f
 8002168:	20000044 	.word	0x20000044
 800216c:	2000002c 	.word	0x2000002c
 8002170:	20000028 	.word	0x20000028
 8002174:	20000030 	.word	0x20000030
							setMotor(L, regL-=16);
 8002178:	4b4d      	ldr	r3, [pc, #308]	; (80022b0 <main+0x464>)
 800217a:	4a4d      	ldr	r2, [pc, #308]	; (80022b0 <main+0x464>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	3b10      	subs	r3, #16
 8002180:	4619      	mov	r1, r3
 8002182:	204c      	movs	r0, #76	; 0x4c
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	f7ff fdd9 	bl	8001d3c <setMotor>
							setMotor(R, regR+=16);
 800218a:	4b4a      	ldr	r3, [pc, #296]	; (80022b4 <main+0x468>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	3310      	adds	r3, #16
 8002190:	4a48      	ldr	r2, [pc, #288]	; (80022b4 <main+0x468>)
 8002192:	4619      	mov	r1, r3
 8002194:	2052      	movs	r0, #82	; 0x52
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	f7ff fdd0 	bl	8001d3c <setMotor>
							goto head;
 800219c:	e792      	b.n	80020c4 <main+0x278>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800219e:	2201      	movs	r2, #1
 80021a0:	2120      	movs	r1, #32
 80021a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a6:	f7fe f9eb 	bl	8000580 <HAL_GPIO_WritePin>
					if (timerL >= 3000 && timerL >= timerR ) {
 80021aa:	682a      	ldr	r2, [r5, #0]
 80021ac:	f640 33b7 	movw	r3, #2999	; 0xbb7
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d94b      	bls.n	800224c <main+0x400>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d21b      	bcs.n	80021f2 <main+0x3a6>
 80021ba:	e03e      	b.n	800223a <main+0x3ee>
						setMotor(L, -45-(4000-getTimer(M))/200);
 80021bc:	f7ff fda4 	bl	8001d08 <getTimer>
 80021c0:	f5c0 607a 	rsb	r0, r0, #4000	; 0xfa0
 80021c4:	fb84 3100 	smull	r3, r1, r4, r0
 80021c8:	17c0      	asrs	r0, r0, #31
 80021ca:	eba0 11a1 	sub.w	r1, r0, r1, asr #6
 80021ce:	392d      	subs	r1, #45	; 0x2d
 80021d0:	204c      	movs	r0, #76	; 0x4c
 80021d2:	f7ff fdb3 	bl	8001d3c <setMotor>
						setMotor(R, 45+(4000-getTimer(M))/200);
 80021d6:	204d      	movs	r0, #77	; 0x4d
 80021d8:	f7ff fd96 	bl	8001d08 <getTimer>
 80021dc:	f5c0 607a 	rsb	r0, r0, #4000	; 0xfa0
 80021e0:	fb84 3100 	smull	r3, r1, r4, r0
 80021e4:	17c0      	asrs	r0, r0, #31
 80021e6:	ebc0 11a1 	rsb	r1, r0, r1, asr #6
 80021ea:	312d      	adds	r1, #45	; 0x2d
 80021ec:	2052      	movs	r0, #82	; 0x52
 80021ee:	f7ff fda5 	bl	8001d3c <setMotor>
						while(getTimer(M) < 4000){
 80021f2:	204d      	movs	r0, #77	; 0x4d
 80021f4:	f7ff fd88 	bl	8001d08 <getTimer>
 80021f8:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
						setMotor(L, -45-(4000-getTimer(M))/200);
 80021fc:	f04f 004d 	mov.w	r0, #77	; 0x4d
						while(getTimer(M) < 4000){
 8002200:	d3dc      	bcc.n	80021bc <main+0x370>
 8002202:	e75f      	b.n	80020c4 <main+0x278>
						setMotor(L, 45+(4000-getTimer(M))/200);
 8002204:	f7ff fd80 	bl	8001d08 <getTimer>
 8002208:	f5c0 607a 	rsb	r0, r0, #4000	; 0xfa0
 800220c:	fb84 3100 	smull	r3, r1, r4, r0
 8002210:	17c0      	asrs	r0, r0, #31
 8002212:	ebc0 11a1 	rsb	r1, r0, r1, asr #6
 8002216:	312d      	adds	r1, #45	; 0x2d
 8002218:	204c      	movs	r0, #76	; 0x4c
 800221a:	f7ff fd8f 	bl	8001d3c <setMotor>
						setMotor(R, -45-(4000-getTimer(M))/200);
 800221e:	204d      	movs	r0, #77	; 0x4d
 8002220:	f7ff fd72 	bl	8001d08 <getTimer>
 8002224:	f5c0 607a 	rsb	r0, r0, #4000	; 0xfa0
 8002228:	fb84 3100 	smull	r3, r1, r4, r0
 800222c:	17c0      	asrs	r0, r0, #31
 800222e:	eba0 11a1 	sub.w	r1, r0, r1, asr #6
 8002232:	392d      	subs	r1, #45	; 0x2d
 8002234:	2052      	movs	r0, #82	; 0x52
 8002236:	f7ff fd81 	bl	8001d3c <setMotor>
						while(getTimer(M) < 4000){
 800223a:	204d      	movs	r0, #77	; 0x4d
 800223c:	f7ff fd64 	bl	8001d08 <getTimer>
 8002240:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
						setMotor(L, 45+(4000-getTimer(M))/200);
 8002244:	f04f 004d 	mov.w	r0, #77	; 0x4d
						while(getTimer(M) < 4000){
 8002248:	d3dc      	bcc.n	8002204 <main+0x3b8>
 800224a:	e73b      	b.n	80020c4 <main+0x278>
					} else if(timerR >= 3000 && timerR >= timerL )  {
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d8f3      	bhi.n	800223a <main+0x3ee>
						setMotor(L, 45);
 8002252:	212d      	movs	r1, #45	; 0x2d
 8002254:	204c      	movs	r0, #76	; 0x4c
 8002256:	f7ff fd71 	bl	8001d3c <setMotor>
						setMotor(R, 45);
 800225a:	212d      	movs	r1, #45	; 0x2d
 800225c:	2052      	movs	r0, #82	; 0x52
 800225e:	f7ff fd6d 	bl	8001d3c <setMotor>
						goto head;
 8002262:	e72f      	b.n	80020c4 <main+0x278>
					} else if (timerR < 3000) {
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d818      	bhi.n	800229c <main+0x450>
						if (deltaR < -20 && deltaR > -4000) {
 800226a:	f8d9 3000 	ldr.w	r3, [r9]
 800226e:	f640 728a 	movw	r2, #3978	; 0xf8a
 8002272:	f603 719f 	addw	r1, r3, #3999	; 0xf9f
 8002276:	4291      	cmp	r1, r2
 8002278:	f67f af7e 	bls.w	8002178 <main+0x32c>
						} else if (deltaR > 20 && deltaR < 4000) {
 800227c:	3b15      	subs	r3, #21
 800227e:	4293      	cmp	r3, r2
 8002280:	d80c      	bhi.n	800229c <main+0x450>
							setMotor(L, regL+=16);
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <main+0x464>)
 8002284:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <main+0x464>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	3310      	adds	r3, #16
 800228a:	4619      	mov	r1, r3
 800228c:	204c      	movs	r0, #76	; 0x4c
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	f7ff fd54 	bl	8001d3c <setMotor>
							setMotor(R, regR-=16);
 8002294:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <main+0x468>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	3b10      	subs	r3, #16
 800229a:	e779      	b.n	8002190 <main+0x344>
							setMotor(L, speed);
 800229c:	2146      	movs	r1, #70	; 0x46
 800229e:	204c      	movs	r0, #76	; 0x4c
 80022a0:	f7ff fd4c 	bl	8001d3c <setMotor>
							setMotor(R, speed);
 80022a4:	2146      	movs	r1, #70	; 0x46
 80022a6:	2052      	movs	r0, #82	; 0x52
 80022a8:	f7ff fd48 	bl	8001d3c <setMotor>
							goto head;
 80022ac:	e70a      	b.n	80020c4 <main+0x278>
 80022ae:	bf00      	nop
 80022b0:	20000034 	.word	0x20000034
 80022b4:	20000038 	.word	0x20000038

080022b8 <HAL_GPIO_EXTI_Callback>:

}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (GPIO_Pin == GPIO_PIN_6) {
 80022b8:	2840      	cmp	r0, #64	; 0x40
 80022ba:	d007      	beq.n	80022cc <HAL_GPIO_EXTI_Callback+0x14>
		HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
	} else if (GPIO_Pin == GPIO_PIN_13) {
 80022bc:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80022c0:	d000      	beq.n	80022c4 <HAL_GPIO_EXTI_Callback+0xc>
 80022c2:	4770      	bx	lr
		HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 80022c4:	2120      	movs	r1, #32
 80022c6:	4804      	ldr	r0, [pc, #16]	; (80022d8 <HAL_GPIO_EXTI_Callback+0x20>)
 80022c8:	f7fe b960 	b.w	800058c <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80022cc:	2200      	movs	r2, #0
 80022ce:	2120      	movs	r1, #32
 80022d0:	4801      	ldr	r0, [pc, #4]	; (80022d8 <HAL_GPIO_EXTI_Callback+0x20>)
 80022d2:	f7fe b955 	b.w	8000580 <HAL_GPIO_WritePin>
 80022d6:	bf00      	nop
 80022d8:	48000800 	.word	0x48000800

080022dc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_MspInit+0x2c>)
 80022de:	699a      	ldr	r2, [r3, #24]
 80022e0:	f042 0201 	orr.w	r2, r2, #1
 80022e4:	619a      	str	r2, [r3, #24]
 80022e6:	699a      	ldr	r2, [r3, #24]
{
 80022e8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ea:	f002 0201 	and.w	r2, r2, #1
 80022ee:	9200      	str	r2, [sp, #0]
 80022f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	69da      	ldr	r2, [r3, #28]
 80022f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022f8:	61da      	str	r2, [r3, #28]
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002304:	b002      	add	sp, #8
 8002306:	4770      	bx	lr
 8002308:	40021000 	.word	0x40021000

0800230c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 800230c:	6803      	ldr	r3, [r0, #0]
 800230e:	4a10      	ldr	r2, [pc, #64]	; (8002350 <HAL_TIM_Base_MspInit+0x44>)
 8002310:	4293      	cmp	r3, r2
{
 8002312:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 8002314:	d010      	beq.n	8002338 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8002316:	4a0f      	ldr	r2, [pc, #60]	; (8002354 <HAL_TIM_Base_MspInit+0x48>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d001      	beq.n	8002320 <HAL_TIM_Base_MspInit+0x14>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800231c:	b002      	add	sp, #8
 800231e:	4770      	bx	lr
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002320:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <HAL_TIM_Base_MspInit+0x4c>)
 8002322:	69da      	ldr	r2, [r3, #28]
 8002324:	f042 0204 	orr.w	r2, r2, #4
 8002328:	61da      	str	r2, [r3, #28]
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	9b01      	ldr	r3, [sp, #4]
}
 8002334:	b002      	add	sp, #8
 8002336:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002338:	4b07      	ldr	r3, [pc, #28]	; (8002358 <HAL_TIM_Base_MspInit+0x4c>)
 800233a:	69da      	ldr	r2, [r3, #28]
 800233c:	f042 0202 	orr.w	r2, r2, #2
 8002340:	61da      	str	r2, [r3, #28]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	9b00      	ldr	r3, [sp, #0]
}
 800234c:	b002      	add	sp, #8
 800234e:	4770      	bx	lr
 8002350:	40000400 	.word	0x40000400
 8002354:	40000800 	.word	0x40000800
 8002358:	40021000 	.word	0x40021000

0800235c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800235c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 800235e:	6802      	ldr	r2, [r0, #0]
 8002360:	491e      	ldr	r1, [pc, #120]	; (80023dc <HAL_TIM_MspPostInit+0x80>)
{
 8002362:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8002366:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	9304      	str	r3, [sp, #16]
 800236a:	9303      	str	r3, [sp, #12]
 800236c:	9305      	str	r3, [sp, #20]
 800236e:	9306      	str	r3, [sp, #24]
 8002370:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 8002372:	d01a      	beq.n	80023aa <HAL_TIM_MspPostInit+0x4e>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 8002374:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <HAL_TIM_MspPostInit+0x84>)
 8002376:	429a      	cmp	r2, r3
 8002378:	d001      	beq.n	800237e <HAL_TIM_MspPostInit+0x22>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800237a:	b008      	add	sp, #32
 800237c:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237e:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
    HAL_GPIO_Init(BIN_1_GPIO_Port, &GPIO_InitStruct);
 8002382:	4818      	ldr	r0, [pc, #96]	; (80023e4 <HAL_TIM_MspPostInit+0x88>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800238a:	615a      	str	r2, [r3, #20]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002392:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = BIN_1_Pin;
 8002394:	f44f 7200 	mov.w	r2, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002398:	2302      	movs	r3, #2
    HAL_GPIO_Init(BIN_1_GPIO_Port, &GPIO_InitStruct);
 800239a:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239c:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Pin = BIN_1_Pin;
 800239e:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023a2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(BIN_1_GPIO_Port, &GPIO_InitStruct);
 80023a4:	f7fd ffde 	bl	8000364 <HAL_GPIO_Init>
}
 80023a8:	e7e7      	b.n	800237a <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023ae:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(AIN_1_GPIO_Port, &GPIO_InitStruct);
 80023b2:	480d      	ldr	r0, [pc, #52]	; (80023e8 <HAL_TIM_MspPostInit+0x8c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b4:	695a      	ldr	r2, [r3, #20]
 80023b6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80023ba:	615a      	str	r2, [r3, #20]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023c2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = AIN_1_Pin;
 80023c4:	f44f 7280 	mov.w	r2, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
    HAL_GPIO_Init(AIN_1_GPIO_Port, &GPIO_InitStruct);
 80023ca:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023cc:	9c01      	ldr	r4, [sp, #4]
    GPIO_InitStruct.Pin = AIN_1_Pin;
 80023ce:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023d2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(AIN_1_GPIO_Port, &GPIO_InitStruct);
 80023d4:	f7fd ffc6 	bl	8000364 <HAL_GPIO_Init>
 80023d8:	e7cf      	b.n	800237a <HAL_TIM_MspPostInit+0x1e>
 80023da:	bf00      	nop
 80023dc:	40000400 	.word	0x40000400
 80023e0:	40000800 	.word	0x40000800
 80023e4:	48000400 	.word	0x48000400
 80023e8:	48000800 	.word	0x48000800

080023ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023ec:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 80023ee:	6801      	ldr	r1, [r0, #0]
 80023f0:	4a18      	ldr	r2, [pc, #96]	; (8002454 <HAL_UART_MspInit+0x68>)
{
 80023f2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 80023f6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	9304      	str	r3, [sp, #16]
 80023fa:	9303      	str	r3, [sp, #12]
 80023fc:	9305      	str	r3, [sp, #20]
 80023fe:	9306      	str	r3, [sp, #24]
 8002400:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8002402:	d001      	beq.n	8002408 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002404:	b008      	add	sp, #32
 8002406:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002408:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800240c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002410:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8002412:	69da      	ldr	r2, [r3, #28]
 8002414:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002418:	61da      	str	r2, [r3, #28]
 800241a:	69da      	ldr	r2, [r3, #28]
 800241c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002420:	9201      	str	r2, [sp, #4]
 8002422:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800242a:	615a      	str	r2, [r3, #20]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002434:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002436:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002438:	250c      	movs	r5, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002440:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002442:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002446:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002448:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244a:	f7fd ff8b 	bl	8000364 <HAL_GPIO_Init>
}
 800244e:	b008      	add	sp, #32
 8002450:	bd70      	pop	{r4, r5, r6, pc}
 8002452:	bf00      	nop
 8002454:	40004400 	.word	0x40004400

08002458 <NMI_Handler>:
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop

0800245c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800245c:	e7fe      	b.n	800245c <HardFault_Handler>
 800245e:	bf00      	nop

08002460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002460:	e7fe      	b.n	8002460 <MemManage_Handler>
 8002462:	bf00      	nop

08002464 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002464:	e7fe      	b.n	8002464 <BusFault_Handler>
 8002466:	bf00      	nop

08002468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002468:	e7fe      	b.n	8002468 <UsageFault_Handler>
 800246a:	bf00      	nop

0800246c <SVC_Handler>:
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop

08002470 <DebugMon_Handler>:
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop

08002474 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop

08002478 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002478:	f7fd bee2 	b.w	8000240 <HAL_IncTick>

0800247c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800247c:	2040      	movs	r0, #64	; 0x40
 800247e:	f7fe b889 	b.w	8000594 <HAL_GPIO_EXTI_IRQHandler>
 8002482:	bf00      	nop

08002484 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002484:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002488:	f7fe b884 	b.w	8000594 <HAL_GPIO_EXTI_IRQHandler>

0800248c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800248c:	4917      	ldr	r1, [pc, #92]	; (80024ec <SystemInit+0x60>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800248e:	4b18      	ldr	r3, [pc, #96]	; (80024f0 <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002490:	4a18      	ldr	r2, [pc, #96]	; (80024f4 <SystemInit+0x68>)

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002492:	4819      	ldr	r0, [pc, #100]	; (80024f8 <SystemInit+0x6c>)
{
 8002494:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002496:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
 800249a:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 800249e:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= 0x00000001U;
 80024a2:	681c      	ldr	r4, [r3, #0]
 80024a4:	f044 0401 	orr.w	r4, r4, #1
 80024a8:	601c      	str	r4, [r3, #0]
  RCC->CFGR &= 0xF87FC00CU;
 80024aa:	685c      	ldr	r4, [r3, #4]
 80024ac:	4022      	ands	r2, r4
 80024ae:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80024b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024ba:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024c2:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80024ca:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80024cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ce:	f022 020f 	bic.w	r2, r2, #15
 80024d2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 &= 0xFF00FCCCU;
 80024d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80024d6:	2400      	movs	r4, #0
  RCC->CFGR3 &= 0xFF00FCCCU;
 80024d8:	4010      	ands	r0, r2

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  RCC->CFGR3 &= 0xFF00FCCCU;
 80024de:	6318      	str	r0, [r3, #48]	; 0x30
  RCC->CIR = 0x00000000U;
 80024e0:	609c      	str	r4, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024e2:	608a      	str	r2, [r1, #8]
#endif
}
 80024e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000ed00 	.word	0xe000ed00
 80024f0:	40021000 	.word	0x40021000
 80024f4:	f87fc00c 	.word	0xf87fc00c
 80024f8:	ff00fccc 	.word	0xff00fccc

080024fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002534 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002500:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002502:	e003      	b.n	800250c <LoopCopyDataInit>

08002504 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002506:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002508:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800250a:	3104      	adds	r1, #4

0800250c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800250c:	480b      	ldr	r0, [pc, #44]	; (800253c <LoopForever+0xa>)
	ldr	r3, =_edata
 800250e:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002510:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002512:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002514:	d3f6      	bcc.n	8002504 <CopyDataInit>
	ldr	r2, =_sbss
 8002516:	4a0b      	ldr	r2, [pc, #44]	; (8002544 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002518:	e002      	b.n	8002520 <LoopFillZerobss>

0800251a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800251a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800251c:	f842 3b04 	str.w	r3, [r2], #4

08002520 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <LoopForever+0x16>)
	cmp	r2, r3
 8002522:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002524:	d3f9      	bcc.n	800251a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002526:	f7ff ffb1 	bl	800248c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800252a:	f000 f811 	bl	8002550 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800252e:	f7ff fc8d 	bl	8001e4c <main>

08002532 <LoopForever>:

LoopForever:
    b LoopForever
 8002532:	e7fe      	b.n	8002532 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002534:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002538:	08002604 	.word	0x08002604
	ldr	r0, =_sdata
 800253c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002540:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002544:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002548:	2000013c 	.word	0x2000013c

0800254c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800254c:	e7fe      	b.n	800254c <ADC1_2_IRQHandler>
	...

08002550 <__libc_init_array>:
 8002550:	b570      	push	{r4, r5, r6, lr}
 8002552:	4e0d      	ldr	r6, [pc, #52]	; (8002588 <__libc_init_array+0x38>)
 8002554:	4c0d      	ldr	r4, [pc, #52]	; (800258c <__libc_init_array+0x3c>)
 8002556:	1ba4      	subs	r4, r4, r6
 8002558:	10a4      	asrs	r4, r4, #2
 800255a:	2500      	movs	r5, #0
 800255c:	42a5      	cmp	r5, r4
 800255e:	d109      	bne.n	8002574 <__libc_init_array+0x24>
 8002560:	4e0b      	ldr	r6, [pc, #44]	; (8002590 <__libc_init_array+0x40>)
 8002562:	4c0c      	ldr	r4, [pc, #48]	; (8002594 <__libc_init_array+0x44>)
 8002564:	f000 f820 	bl	80025a8 <_init>
 8002568:	1ba4      	subs	r4, r4, r6
 800256a:	10a4      	asrs	r4, r4, #2
 800256c:	2500      	movs	r5, #0
 800256e:	42a5      	cmp	r5, r4
 8002570:	d105      	bne.n	800257e <__libc_init_array+0x2e>
 8002572:	bd70      	pop	{r4, r5, r6, pc}
 8002574:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002578:	4798      	blx	r3
 800257a:	3501      	adds	r5, #1
 800257c:	e7ee      	b.n	800255c <__libc_init_array+0xc>
 800257e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002582:	4798      	blx	r3
 8002584:	3501      	adds	r5, #1
 8002586:	e7f2      	b.n	800256e <__libc_init_array+0x1e>
 8002588:	080025fc 	.word	0x080025fc
 800258c:	080025fc 	.word	0x080025fc
 8002590:	080025fc 	.word	0x080025fc
 8002594:	08002600 	.word	0x08002600

08002598 <memset>:
 8002598:	4402      	add	r2, r0
 800259a:	4603      	mov	r3, r0
 800259c:	4293      	cmp	r3, r2
 800259e:	d100      	bne.n	80025a2 <memset+0xa>
 80025a0:	4770      	bx	lr
 80025a2:	f803 1b01 	strb.w	r1, [r3], #1
 80025a6:	e7f9      	b.n	800259c <memset+0x4>

080025a8 <_init>:
 80025a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025aa:	bf00      	nop
 80025ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ae:	bc08      	pop	{r3}
 80025b0:	469e      	mov	lr, r3
 80025b2:	4770      	bx	lr

080025b4 <_fini>:
 80025b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025b6:	bf00      	nop
 80025b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ba:	bc08      	pop	{r3}
 80025bc:	469e      	mov	lr, r3
 80025be:	4770      	bx	lr
